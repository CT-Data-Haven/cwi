% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_csv_dump.R
\name{batch_csv_dump}
\alias{batch_csv_dump}
\title{Write a list of data frames to CSV and keep it movin'}
\usage{
batch_csv_dump(data, split_by = NULL, path = ".", base_name = NULL,
  bind = FALSE)
}
\arguments{
\item{data}{A data frame or a list of data frames}

\item{split_by}{Bare column name of variable to split by. If \code{data} is a list, this is unnecessary and will be ignored.}

\item{path}{String giving a path at which to save files; defaults to current working directory.}

\item{base_name}{Optional string to be prepended to all file names.}

\item{bind}{Logical: whether to row-bind list of data frames into a single data frame. Defaults \code{FALSE}, in which case a list of data frames is returned.}
}
\value{
Either a list of data frames (in case of \code{bind = FALSE}) or a single data frame (in case of \code{bind = TRUE}).
}
\description{
This function takes either a list of data frames, or a data frame and a column to split by, and writes them all to CSV files. It then returns the list of data frames, optionally row-binded back together. It fits neatly in the middle of a longer piped workflow.
}
\examples{
\dontrun{
  race_pops \%>\%
    split(.$region) \%>\%
    batch_csv_dump(base_name = "race_pops", bind = TRUE) \%>\%
    dplyr::filter(variable != "total")
}
}
