% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quick_map.R
\name{quick_map}
\alias{quick_map}
\title{Quickly create a choropleth sketch}
\usage{
quick_map(
  data,
  name = name,
  value = value,
  level = c("town", "neighborhood", "tract"),
  city = NULL,
  n = 5,
  palette = "GnBu",
  title = NULL,
  ...
)
}
\arguments{
\item{data}{A data frame containing data by geography.}

\item{name}{Bare column name of location names to join; defaults \code{name}.}

\item{value}{Bare column name of numeric values to map; defaults \code{value}.}

\item{level}{String giving the desired geographic level; must be one of \code{"town"}, \code{"neighborhood"}, or \code{"tract"}. Defaults \code{"town"}.}

\item{city}{If geographic level is neighborhood, string of the corresponding city name to match to a spatial object.}

\item{n}{Number of breaks into which to bin values; defaults (approximately) 5.}

\item{palette}{String of a ColorBrewer palette; see \code{\link[RColorBrewer:ColorBrewer]{RColorBrewer::RColorBrewer()}} for possible values. Defaults \code{"GnBu"}.}

\item{title}{String giving the title, if desired, for the plot.}

\item{...}{
  Arguments passed on to \code{\link[ggplot2:ggsf]{ggplot2::geom_sf}}
  \describe{
    \item{\code{mapping}}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}
    \item{\code{stat}}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}
    \item{\code{position}}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}
    \item{\code{na.rm}}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}
    \item{\code{show.legend}}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.

You can also set this to one of "polygon", "line", and "point" to
override the default legend.}
    \item{\code{inherit.aes}}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
  }}
}
\value{
A ggplot
}
\description{
This is a quick way to create a choropleth sketch of town-, neighborhood-, or tract-level data. Uses a corresponding \code{sf} object; as of June 2018, this \code{sf} object must be one that ships with this package, or otherwise be globally available.
}
\examples{
\dontrun{
tidycensus::get_acs(
    geography = "county subdivision",
    variables = c(median_age = "B01002_001"), state = "09", county = "009"
) |>
    town_names(NAME) |>
    dplyr::filter(NAME \%in\% regions$`Greater New Haven`) |>
    quick_map(name = NAME, value = estimate, title = "Median age by town, 2017", n = 6)
}
}
\seealso{
\code{\link[ggplot2:ggsf]{ggplot2::geom_sf()}}

Other quick-plotting-functions: 
\code{\link{geo_level_plot}()}
}
\concept{quick-plotting-functions}
