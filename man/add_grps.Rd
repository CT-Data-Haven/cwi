% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_grps.R
\name{add_grps}
\alias{add_grps}
\title{Collapse variable into groups and sum}
\usage{
add_grps(data, grp_list, group = group, value = estimate, moe = NULL)
}
\arguments{
\item{data}{A data frame; will honor grouping}

\item{grp_list}{A named list of groups to collapse \code{group} into, either as characters that \emph{exactly} match the labels in the grouping column, or as numbers giving the position of each label within unique values of the grouping column. Position numbers are easier to type correctly.}

\item{group}{Bare column name giving groups in data; will be converted to factor}

\item{value}{Bare column name of values. Defaults to \code{estimate}}

\item{moe}{Bare column name of margins of error; if supplied, MOEs of sums will be included in output}
}
\value{
A data frame/tibble with sums of \code{estimate}. Retains grouping columns
}
\description{
This function makes it easy to collapse multiple labels of some column into groups, then sum them. The advantage of using this over simply relabeling a factor column (such as with \code{forcats::fct_collapse}) is that categories here don't have to be mutually exclusive. For example, from a table of populations by age group, you could collapse and aggregate into total population, people 18+, and people 65+ all within a single function call.
}
\details{
The quickest and most fool-proof way to create aggregate groups is to give their positions within a column's unique values. In this example column of ages:

\if{html}{\out{<div class="sourceCode">}}\preformatted{1 ages 0-5
2 ages 6-17
3 ages 18-34
4 ages 35-64
5 ages 65-84
6 ages 85+
}\if{html}{\out{</div>}}

you would calculate total population from positions 1-6, ages 18+ from positions 3-6, and ages 65+ from positions 5-6. \code{\link[=show_uniq]{show_uniq()}} is a helper function for finding these positions.
}
\examples{
# make a list of the positions of the groups you want to collapse
# e.g. education$edu_level[2:16] has the education levels that we consider
# less than high school
education |>
    dplyr::group_by(name) |>
    add_grps(
        list(
            ages25plus = 1,
            less_than_high_school = 2:16,
            high_school_plus = 17:25,
            bachelors_plus = 22:25
        ),
        group = edu_level, value = estimate
    )
}
\seealso{
\code{\link[=show_uniq]{show_uniq()}}
}
\keyword{augmenting-functions}
