% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adj_inflation.R
\name{adj_inflation}
\alias{adj_inflation}
\alias{get_cpi}
\title{Calculate inflation adjustments}
\source{
Bureau of Labor Statistics via their API \url{https://www.bls.gov/developers/home.htm}
}
\usage{
adj_inflation(
  data,
  value,
  year,
  base_year = endyears[["acs"]],
  verbose = TRUE,
  key = NULL
)

get_cpi(
  years,
  base = endyears[["acs"]],
  seasonal = FALSE,
  monthly = FALSE,
  verbose = TRUE,
  key = NULL
)
}
\arguments{
\item{data}{A data frame containing monetary values by year.}

\item{value}{Bare column name of monetary values; for safety, has no default.}

\item{year}{Bare column name of years; for safety, has no default.}

\item{base_year}{Year on which to base inflation amounts. Defaults to 2023, which corresponds to saying "... adjusted to 2023 dollars."}

\item{verbose}{Logical: if \code{TRUE} (default), this will print overview information about the series being used, as returned by the API.}

\item{key}{A string giving the BLS API key. If \code{NULL} (the default), will take the value in \code{Sys.getenv("BLS_KEY")}.}

\item{years}{Numeric vector: years of CPI values to get}

\item{base}{Base reference point, either a year or a date, or something that can be easily coerced to a date. If just a year, will default to January 1 of that year. Default: 2023}

\item{seasonal}{Logical, whether to get seasonally-adjusted or unadjusted values. Default: FALSE}

\item{monthly}{Logical. If TRUE, return monthly values. Otherwise, CPI values are averaged by the year. Default: FALSE}
}
\value{
For \code{adj_inflation}: The original data frame with two additional columns: adjustment factors, and adjusted values. The adjusted values column is named based on the name supplied as \code{value}; e.g. if \code{value = avg_wage}, the adjusted column is named \code{adj_avg_wage}.

For \code{get_cpi}: A data frame/tibble with columns for date (either numeric years or proper Date objects), CPI value, and adjustment factor based on the \code{base} argument.
}
\description{
\code{adj_inflation} is modeled after \code{blscrapeR::inflation_adjust} that joins a data frame with an inflation adjustment table from the Bureau of Labor Statistics' Consumer Price Index, then calculates adjusted values. It returns the original data frame with two additional columns for adjustment factors and adjustment values. \code{get_cpi} is a more basic version of \code{adj_inflation}. It doesn't adjust your data for you, just fetches the CPI table used for those adjustments. It handles a couple options: either seasonally-adjusted or unadjusted, and either annual averages or monthly values. \code{adj_inflation}, by contrast, is fixed to annual and not seasonally adjusted. While \code{adj_inflation} is a high-level convenience function, \code{get_cpi} is better suited to doing more complex adjustments yourself, such as setting seasonality or periodicity.
}
\details{
\strong{Note:} Because these functions make API calls, internet access is required.

According to the BLS research page, the series these functions use are best suited to data going back to about 2000, when their methodology changed. For previous years, a more accurate version of the index is available on their \href{https://www.bls.gov/cpi/research-series/r-cpi-u-rs-home.htm}{site}.
}
\examples{
\dontrun{
wages <- data.frame(
    fiscal_year = 2010:2016,
    wage = c(50000, 51000, 52000, 53000, 54000, 55000, 54000)
)
adj_inflation(wages, value = wage, year = fiscal_year, base_year = 2016)
}
\dontrun{
get_cpi(2018:2024, base = 2024, monthly = FALSE)
get_cpi(2018:2024, base = "2024-12-01", monthly = TRUE)
}
}
\seealso{
Other augmenting-functions: 
\code{\link{label_decennial}()}

Other augmenting-functions: 
\code{\link{label_decennial}()}
}
\concept{augmenting-functions}
