[{"path":"https://CT-Data-Haven.github.io/cwi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 cwi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"acs-3","dir":"Articles","previous_headings":"","what":"2020 ACS","title":"ACS updates","text":"lot new 2020 ACS.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"acs-4","dir":"Articles","previous_headings":"","what":"2019 ACS","title":"ACS updates","text":"2019 ACS included reengineering tables, new additions. clarifications phrasing questions tables, time leaving home work. substantial changes family structure phrased inclusive -sex unmarried couples–see recent working paper . just quick check ’s new changed. named list()","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"new-tables","dir":"Articles","previous_headings":"","what":"New tables","title":"ACS updates","text":"2019 ACS included reengineering tables, new additions. clarifications phrasing questions tables, time leaving home work. substantial changes family structure phrased inclusive -sex unmarried couples–see recent working paper . just quick check ’s new changed.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"variables-in-the-tables-related-to-gender-family-structure","dir":"Articles","previous_headings":"","what":"Variables in the tables related to gender & family structure:","title":"ACS updates","text":"named list()","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"fetching-data-from-acs","dir":"Articles","previous_headings":"","what":"Fetching data from ACS","title":"Basic workflow","text":"’m pulling entries cwi dataset cwi::regions (list) include Greater New Haven-area ones. fetch ACS tables regions, towns, New Haven County. Neighborhoods corresponding tracts block groups included 4 cities (see neighborhood_tracts). Pass get neighborhood-level aggregates.","code":"gnh_regions <- regions[c(\"Greater New Haven\", \"New Haven Inner Ring\", \"New Haven Outer Ring\")]  gnh_data <- map(table_nums, multi_geo_acs,     year = yr, towns = regions$`Greater New Haven`,     regions = gnh_regions, state = \"09\", sleep = 1,     verbose = FALSE )  gnh_data$total_pop #> # A tibble: 26 × 9 #>     year level    state       county geoid name          variable estimate   moe #>    <dbl> <fct>    <chr>       <chr>  <chr> <chr>         <chr>       <dbl> <dbl> #>  1  2023 1_state  <NA>        <NA>   09    Connecticut   B01003_…  3598348    NA #>  2  2023 2_county Connecticut <NA>   09110 Capitol COG   B01003_…   969029    NA #>  3  2023 2_county Connecticut <NA>   09120 Greater Brid… B01003_…   326296    NA #>  4  2023 2_county Connecticut <NA>   09130 Lower Connec… B01003_…   174983    NA #>  5  2023 2_county Connecticut <NA>   09140 Naugatuck Va… B01003_…   452303    NA #>  6  2023 2_county Connecticut <NA>   09150 Northeastern… B01003_…    95829    NA #>  7  2023 2_county Connecticut <NA>   09160 Northwest Hi… B01003_…   112848    NA #>  8  2023 2_county Connecticut <NA>   09170 South Centra… B01003_…   566803    NA #>  9  2023 2_county Connecticut <NA>   09180 Southeastern… B01003_…   279025    NA #> 10  2023 2_county Connecticut <NA>   09190 Western Conn… B01003_…   621232    NA #> # ℹ 16 more rows multi_geo_acs(\"B01003\",     towns = \"New Haven\",     neighborhoods = new_haven_tracts,     nhood_geoid = \"geoid\",     year = yr ) #> # A tibble: 11 × 9 #>     year level    state       county         geoid name  variable estimate   moe #>    <dbl> <fct>    <chr>       <chr>          <chr> <chr> <chr>       <dbl> <dbl> #>  1  2023 1_state  <NA>        <NA>           09    Conn… B01003_…  3598348    NA #>  2  2023 2_county Connecticut <NA>           09110 Capi… B01003_…   969029    NA #>  3  2023 2_county Connecticut <NA>           09120 Grea… B01003_…   326296    NA #>  4  2023 2_county Connecticut <NA>           09130 Lowe… B01003_…   174983    NA #>  5  2023 2_county Connecticut <NA>           09140 Naug… B01003_…   452303    NA #>  6  2023 2_county Connecticut <NA>           09150 Nort… B01003_…    95829    NA #>  7  2023 2_county Connecticut <NA>           09160 Nort… B01003_…   112848    NA #>  8  2023 2_county Connecticut <NA>           09170 Sout… B01003_…   566803    NA #>  9  2023 2_county Connecticut <NA>           09180 Sout… B01003_…   279025    NA #> 10  2023 2_county Connecticut <NA>           09190 West… B01003_…   621232    NA #> 11  2023 3_town   Connecticut South Central… 0917… New … B01003_…   132893    76"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"aggregating-and-analyzing-data","dir":"Articles","previous_headings":"","what":"Aggregating and analyzing data","title":"Basic workflow","text":"total population data straightforward, one variable, B01003_001. tibble returned GEOID, except custom geographies like regions; name geography, including names region; variable codes; estimates; margins error default 90% confidence level; geographic level, numbered order decreasing size; counties towns. race ethnicity table require calculations: Using label_acs(), join race tibble cwi::acs_vars dataset get variable labels. Oftentimes, labels need separated \"!!\" delimeter. Group geographic level, county, name. Call add_grps() list racial groups labels’ positions label column. gives estimates , optionally, margins error aggregates calc_shares() gives shares group’s estimate \"total\" denominator. tenure table, ’s easiest separate labels \"!!\". table can wrangled shares households owner-occupied.","code":"gnh_data$race |>     label_acs(year = yr) |>     group_by(level, name) |>     add_grps(list(total = 1, white = 3, black = 4, latino = 12, other = 5:9), group = label) |>     calc_shares(group = label, denom = \"total\") #> # A tibble: 130 × 5 #> # Groups:   level, name [26] #>    level    name        label  estimate share #>    <fct>    <chr>       <fct>     <dbl> <dbl> #>  1 1_state  Connecticut total   3598348 NA    #>  2 1_state  Connecticut white   2265780  0.63 #>  3 1_state  Connecticut black    355413  0.1  #>  4 1_state  Connecticut latino   640668  0.18 #>  5 1_state  Connecticut other    336487  0.09 #>  6 2_county Capitol COG total    969029 NA    #>  7 2_county Capitol COG white    590481  0.61 #>  8 2_county Capitol COG black    111597  0.12 #>  9 2_county Capitol COG latino   168439  0.17 #> 10 2_county Capitol COG other     98512  0.1  #> # ℹ 120 more rows homeownership <- gnh_data$tenure |>     label_acs(year = yr) |>     separate(label, into = c(\"total\", \"tenure\"), sep = \"!!\", fill = \"left\") |>     select(level, name, tenure, estimate) |>     group_by(level, name) |>     calc_shares(group = tenure, denom = \"Total\") |>     filter(tenure == \"Owner occupied\")  homeownership #> # A tibble: 26 × 5 #> # Groups:   level, name [26] #>    level    name                               tenure         estimate share #>    <fct>    <chr>                              <fct>             <dbl> <dbl> #>  1 1_state  Connecticut                        Owner occupied   939912  0.66 #>  2 2_county Capitol COG                        Owner occupied   254424  0.65 #>  3 2_county Greater Bridgeport COG             Owner occupied    77362  0.65 #>  4 2_county Lower Connecticut River Valley COG Owner occupied    55387  0.75 #>  5 2_county Naugatuck Valley COG               Owner occupied   120630  0.68 #>  6 2_county Northeastern Connecticut COG       Owner occupied    29835  0.76 #>  7 2_county Northwest Hills COG                Owner occupied    35683  0.76 #>  8 2_county South Central Connecticut COG      Owner occupied   137908  0.61 #>  9 2_county Southeastern Connecticut COG       Owner occupied    74923  0.65 #> 10 2_county Western Connecticut COG            Owner occupied   153760  0.66 #> # ℹ 16 more rows"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"visual-sketches","dir":"Articles","previous_headings":"","what":"Visual sketches","title":"Basic workflow","text":"geo_level_plot() gives quick visual overview homeownership rates, highlighting town-level values.  acs_quick_map() gives quick map sketch rates. function uses Jenks algorithm making breaks jenks(). algorithm well suited visually displaying larger inequalities, number breaks give won’t necessarily number breaks returned.function lets us see whether ’s geographic distribution data minimal work.  Since returns ggplot object sf data, can add additional ggplot functions, labeling, themes, additional scales geoms.","code":"homeownership |>     geo_level_plot(value = share, hilite = \"darkslateblue\", type = \"point\") tenure_map <- homeownership |>     filter(level == \"4_town\") |>     quick_map(         value = share, level = \"town\", color = \"black\", linewidth = 0.4,         title = \"Homeownership, Greater New Haven\", palette = \"BuPu\"     )  tenure_map tenure_map +     labs(subtitle = stringr::str_glue(\"By town, {yr}\")) +     geom_sf(data = ~ filter(., name == \"New Haven\"), fill = NA, color = \"black\", linewidth = 1.5)"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"batch-output","dir":"Articles","previous_headings":"","what":"Batch output","title":"Basic workflow","text":"Say part pipeline, need calculations, write different sections data frame CSV files pass along colleague refer later, continue calculations. batch_csv_dump() takes either list data frames data frame plus column split , writes set CSV files, lets move along next step pipeline. example, need pull table populations age group several regions Connecticut. don’t need split populations gender, ’ll add male female populations age group. don’t actually need detailed age groups now, need stash files later, ’ll aggregate, write bunch files, aggregate broader age groups need current work.","code":"new_haven_regions <- regions[c(     \"Greater New Haven\", \"New Haven Inner Ring\",     \"New Haven Outer Ring\", \"Lower Naugatuck Valley\",     \"Greater Waterbury\" )]  age <- multi_geo_acs(     table = \"B01001\", year = yr, towns = NULL,     regions = new_haven_regions,     counties = c(\"New Haven County\", \"Fairfield County\") ) |>     label_acs(year = yr) |>     # shortcut around tidyr::separate     separate_acs(into = c(\"sex\", \"age\"), drop_total = TRUE) |>     filter(!is.na(age)) |>     mutate(age = forcats::as_factor(age)) |>     group_by(name, level, age) |>     summarise(estimate = sum(estimate)) |>     ungroup()  age |>     split(~name) |>     batch_csv_dump(base_name = \"pop_by_age\", bind = TRUE, verbose = TRUE) |>     group_by(level, name) |>     add_grps(list(ages00_04 = 1, ages05_17 = 2:4, ages00_17 = 1:4),         group = age, value = estimate     ) |>     arrange(level, name, age)"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"employment-trends","dir":"Articles","previous_headings":"","what":"Employment trends","title":"Basic workflow","text":"’m also interested learning employment industry past several years. qwi_industry() fetches county-level data industry time, either quarterly annually. ’ll look annual averages industries South Central COG Connecticut past 16 years. ’m filtering industry code “00”, counts industries. Next, say want look industries largest South Central COG 2018, see changed COG statewide time period. ’ll filter employment, get industries largest numbers employees, filter employment just industries plot .  look unemployment rates time, can use laus_trend(). LAUS covers smaller geographies QWI, laus_trend() set find data combination state, counties, towns. LAUS API returns monthly data labor force counts, employment counts, unemployed counts, unemployment rate; laus_trend() lets specify measures fetch. chunk turned now API finicky.","code":"scc_employment <- qwi_industry(2002:2018, counties = \"170\", annual = TRUE) |>     mutate(location = \"South Central COG\") ct_employment <- qwi_industry(2002:2018, annual = TRUE) |>     mutate(location = \"Connecticut\") employment <- bind_rows(scc_employment, ct_employment) |>     filter(industry != \"00\") |>     inner_join(naics_codes |> select(-ind_level), by = \"industry\")  employment #> # A tibble: 680 × 8 #>     year state county industry     emp payroll location          label           #>    <dbl> <chr> <chr>  <chr>      <dbl>   <dbl> <chr>             <chr>           #>  1  2002 09    170    11         377        NA South Central COG Agriculture, F… #>  2  2002 09    170    21          31.2      NA South Central COG Mining, Quarry… #>  3  2002 09    170    22        1091.       NA South Central COG Utilities       #>  4  2002 09    170    23       11219        NA South Central COG Construction    #>  5  2002 09    170    31-33    33464.       NA South Central COG Manufacturing   #>  6  2002 09    170    42       11315.       NA South Central COG Wholesale Trade #>  7  2002 09    170    44-45    32888.       NA South Central COG Retail Trade    #>  8  2002 09    170    48-49     5740        NA South Central COG Transportation… #>  9  2002 09    170    51       11904.       NA South Central COG Information     #> 10  2002 09    170    52       10662.       NA South Central COG Finance and In… #> # ℹ 670 more rows top2018 <- employment |>     filter(year == 2018, county == \"170\") |>     top_n(8, emp) |>     pull(industry) top2018 #> [1] \"31-33\" \"44-45\" \"54\"    \"56\"    \"61\"    \"62\"    \"72\"    \"81\"  employment |>     filter(industry %in% top2018) |>     mutate(label = stringr::str_sub(label, 1, 25)) |>     mutate(Emp_1k = emp / 1000) |>     ggplot(aes(x = year, y = Emp_1k, color = label)) +     geom_line() +     labs(         x = \"Year\", y = \"Employees (thousands)\", title = \"Employment by industry\",         subtitle = \"Connecticut and South Central COG, 2002-2018\", color = \"Industry\"     ) +     theme_minimal() +     facet_wrap(vars(location), scales = \"free_y\") unemployment <- laus_trend(c(\"New Haven\", \"New Haven County\", \"Connecticut\"),     startyear = 2000, endyear = 2018, measures = \"unemployment rate\" ) |>     mutate(unemployment_rate = unemployment_rate / 100) |>     select(area, date, value = unemployment_rate)  unemployment  unemp_plot <- ggplot(unemployment, aes(x = date, y = value, group = area, color = area)) +     geom_line() +     geom_smooth(se = FALSE, method = \"loess\", linewidth = 0.8) unemp_plot"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"quarterly-workforce-indicators","dir":"Articles","previous_headings":"","what":"Quarterly Workforce Indicators","title":"Basic workflow","text":"’m also interested learning employment industry past several years. qwi_industry() fetches county-level data industry time, either quarterly annually. ’ll look annual averages industries South Central COG Connecticut past 16 years. ’m filtering industry code “00”, counts industries. Next, say want look industries largest South Central COG 2018, see changed COG statewide time period. ’ll filter employment, get industries largest numbers employees, filter employment just industries plot .","code":"scc_employment <- qwi_industry(2002:2018, counties = \"170\", annual = TRUE) |>     mutate(location = \"South Central COG\") ct_employment <- qwi_industry(2002:2018, annual = TRUE) |>     mutate(location = \"Connecticut\") employment <- bind_rows(scc_employment, ct_employment) |>     filter(industry != \"00\") |>     inner_join(naics_codes |> select(-ind_level), by = \"industry\")  employment #> # A tibble: 680 × 8 #>     year state county industry     emp payroll location          label           #>    <dbl> <chr> <chr>  <chr>      <dbl>   <dbl> <chr>             <chr>           #>  1  2002 09    170    11         377        NA South Central COG Agriculture, F… #>  2  2002 09    170    21          31.2      NA South Central COG Mining, Quarry… #>  3  2002 09    170    22        1091.       NA South Central COG Utilities       #>  4  2002 09    170    23       11219        NA South Central COG Construction    #>  5  2002 09    170    31-33    33464.       NA South Central COG Manufacturing   #>  6  2002 09    170    42       11315.       NA South Central COG Wholesale Trade #>  7  2002 09    170    44-45    32888.       NA South Central COG Retail Trade    #>  8  2002 09    170    48-49     5740        NA South Central COG Transportation… #>  9  2002 09    170    51       11904.       NA South Central COG Information     #> 10  2002 09    170    52       10662.       NA South Central COG Finance and In… #> # ℹ 670 more rows top2018 <- employment |>     filter(year == 2018, county == \"170\") |>     top_n(8, emp) |>     pull(industry) top2018 #> [1] \"31-33\" \"44-45\" \"54\"    \"56\"    \"61\"    \"62\"    \"72\"    \"81\"  employment |>     filter(industry %in% top2018) |>     mutate(label = stringr::str_sub(label, 1, 25)) |>     mutate(Emp_1k = emp / 1000) |>     ggplot(aes(x = year, y = Emp_1k, color = label)) +     geom_line() +     labs(         x = \"Year\", y = \"Employees (thousands)\", title = \"Employment by industry\",         subtitle = \"Connecticut and South Central COG, 2002-2018\", color = \"Industry\"     ) +     theme_minimal() +     facet_wrap(vars(location), scales = \"free_y\")"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"local-area-unemployment-statistics","dir":"Articles","previous_headings":"","what":"Local Area Unemployment Statistics","title":"Basic workflow","text":"look unemployment rates time, can use laus_trend(). LAUS covers smaller geographies QWI, laus_trend() set find data combination state, counties, towns. LAUS API returns monthly data labor force counts, employment counts, unemployed counts, unemployment rate; laus_trend() lets specify measures fetch. chunk turned now API finicky.","code":"unemployment <- laus_trend(c(\"New Haven\", \"New Haven County\", \"Connecticut\"),     startyear = 2000, endyear = 2018, measures = \"unemployment rate\" ) |>     mutate(unemployment_rate = unemployment_rate / 100) |>     select(area, date, value = unemployment_rate)  unemployment  unemp_plot <- ggplot(unemployment, aes(x = date, y = value, group = area, color = area)) +     geom_line() +     geom_smooth(se = FALSE, method = \"loess\", linewidth = 0.8) unemp_plot"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/shapefiles.html","id":"sf","dir":"Articles","previous_headings":"","what":"sf","title":"Shapefiles","text":"sf objects easy plot either box sf::plot.sf(), ggplot2::ggplot() ggplot2 version 3.0.0. Use ggplot() means geom_sf() can overlayed basemap ggmap, done neighborhood examples. sf well-documented, uses dplyr-type functions allow mutating, filtering, summarizing, joining, data wrangling functions. See sf vignettes help getting started: vignette(package = \"sf\"). sf data frames look act like data frames, shape information attached.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/shapefiles.html","id":"statewide","dir":"Articles","previous_headings":"","what":"Statewide","title":"Shapefiles","text":"basic plot cwi::town_sf, ggplot aesthetics set, graticule lines turned coord_sf(ndiscr = F), blank theme.  dplyr operations. example, group_by() followed summarise() conducts union group’s geometries, using sf::st_union() back-end.  cwi::tract_sf, fairly large shape containing tracts state, 2020 redistricting.","code":"ggplot(town_sf) +     geom_sf(fill = \"gray70\", color = \"white\", linewidth = 0.5) +     ggtitle(\"Connecticut towns\") town_sf |>     filter(name %in% regions[[\"Greater New Haven\"]]) |>     group_by(area = ifelse(name == \"New Haven\", \"New Haven\", \"New Haven suburbs\")) |>     summarise() |>     ggplot() +     geom_sf(aes(fill = area), color = \"white\") +     scale_fill_manual(values = c(\"New Haven\" = \"mediumorchid\", \"New Haven suburbs\" = \"gray70\")) +     theme(legend.position = \"bottom\") +     ggtitle(\"Filtering and unioning shapes\") ggplot(tract_sf) +     geom_sf(fill = \"gray70\", color = \"white\", linewidth = 0.1) +     ggtitle(\"Connecticut tracts\")"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/shapefiles.html","id":"neighborhoods","dir":"Articles","previous_headings":"","what":"Neighborhoods","title":"Shapefiles","text":"Neighborhood shapes made DataHaven splitting grouping census tracts neighborhood areas defined city’s government. cases, boundaries slightly adjusted fit tracts. Small neighborhoods may grouped together analysis. See documentation cwi::neighborhood_shapes crosswalk tracts neighborhoods cwi::neighborhood_tracts.","code":"list(     \"New Haven\" = new_haven_sf, Stamford = stamford_sf,     \"Hartford/West Hartford\" = hartford_sf, Bridgeport = bridgeport_sf ) |>     purrr::iwalk(function(shp, title) {         p <- ggplot(shp) +             geom_sf(color = \"mediumorchid3\", fill = \"orchid3\", alpha = 0.1) +             geom_sf_text(aes(label = name), size = 2)         print(p)     })"},{"path":"https://CT-Data-Haven.github.io/cwi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Seaberry. Author, maintainer.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaberry C (2025). cwi: Prep DataHaven's Community Wellbeing Index. R package version 2.0.1, https://github.com/CT-Data-Haven/cwi.","code":"@Manual{,   title = {cwi: Prep for DataHaven's Community Wellbeing Index},   author = {Camille Seaberry},   year = {2025},   note = {R package version 2.0.1},   url = {https://github.com/CT-Data-Haven/cwi}, }"},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"cwi-","dir":"","previous_headings":"","what":"Prep for DataHaven's Community Wellbeing Index","title":"Prep for DataHaven's Community Wellbeing Index","text":"original goal cwi get data, primarily Census ACS, fetched, aggregated, analyzed DataHaven’s 2019 Community Index reports. ’s now evolved support day--day work several major reports. includes functions speed standardize analysis multiple staff people, preview trends patterns ’ll need write , get data layperson-friendly formats. pairs well many functions Camille’s brilliantly-named camiller package, though longer depends .","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prep for DataHaven's Community Wellbeing Index","text":"can install package GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"CT-Data-Haven/cwi\")"},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Prep for DataHaven's Community Wellbeing Index","text":"package relies heavily : tidyverse packages, namely dplyr, tidyr, purrr, stringr, forcats, ggplot2 (version >= 3.0.0) (lot tidyverse) rlang tidyselect non-standard evaluation many functions tidycensus actually getting Census data sf isn’t required ’s encouraged","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Prep for DataHaven's Community Wellbeing Index","text":"cwi ships several datasets shapefiles. include: Shapes (sf objects) towns, tracts, city neighborhoods New Haven, Hartford, Bridgeport, Stamford Common ACS table numbers—hopefully decreases time spent prowling around Census Bureau site Definitions neighborhoods tract block group, regions town","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"sources","dir":"","previous_headings":"","what":"Sources","title":"Prep for DataHaven's Community Wellbeing Index","text":"package contains functions make easier reproducible fetch analyze data : American Community Survey (US Census Bureau) Decennial Census (US Census Bureau) Quarterly Workforce Indicators (US Census Bureau Center Economic Studies) Local Area Unemployment Statistics (Bureau Labor Statistics) DataHaven’s Community Wellbeing Survey moved dcws package","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Prep for DataHaven's Community Wellbeing Index","text":"’s example getting big table calculate homeownership rates across many geographies :  See detail vignette: vignette(\"cwi\").","code":"library(dplyr) library(cwi) tenure <- multi_geo_acs(     table = basic_table_nums$tenure,     year = 2020,     regions = regions[c(\"Greater New Haven\", \"New Haven Inner Ring\", \"New Haven Outer Ring\")],     counties = \"New Haven\",     towns = regions[[\"Greater New Haven\"]],     us = TRUE ) tenure #> # A tibble: 57 × 9 #>     year level    state       county geoid name         variable estimate    moe #>    <dbl> <fct>    <chr>       <chr>  <chr> <chr>        <chr>       <dbl>  <dbl> #>  1  2020 1_us     <NA>        <NA>   1     United Stat… B25003_…   1.22e8 211970 #>  2  2020 1_us     <NA>        <NA>   1     United Stat… B25003_…   7.88e7 342600 #>  3  2020 1_us     <NA>        <NA>   1     United Stat… B25003_…   4.36e7 134985 #>  4  2020 2_state  <NA>        <NA>   09    Connecticut  B25003_…   1.39e6   3268 #>  5  2020 2_state  <NA>        <NA>   09    Connecticut  B25003_…   9.15e5   5015 #>  6  2020 2_state  <NA>        <NA>   09    Connecticut  B25003_…   4.70e5   4548 #>  7  2020 3_county Connecticut <NA>   09009 New Haven C… B25003_…   3.33e5   1647 #>  8  2020 3_county Connecticut <NA>   09009 New Haven C… B25003_…   2.07e5   2123 #>  9  2020 3_county Connecticut <NA>   09009 New Haven C… B25003_…   1.26e5   2225 #> 10  2020 4_region Connecticut <NA>   <NA>  Greater New… B25003_…   1.76e5   1834 #> # ℹ 47 more rows homeownership <- tenure |>     label_acs(year = 2020) |>     dplyr::group_by(level, name) |>     calc_shares(group = label, denom = \"Total\") |>     dplyr::filter(stringr::str_detect(label, \"Owner\")) |>     dplyr::select(level, name, share)  homeownership #> # A tibble: 19 × 3 #> # Groups:   level, name [19] #>    level    name                 share #>    <fct>    <chr>                <dbl> #>  1 1_us     United States         0.64 #>  2 2_state  Connecticut           0.66 #>  3 3_county New Haven County      0.62 #>  4 4_region Greater New Haven     0.6  #>  5 4_region New Haven Inner Ring  0.61 #>  6 4_region New Haven Outer Ring  0.79 #>  7 5_town   Bethany               0.92 #>  8 5_town   Branford              0.65 #>  9 5_town   East Haven            0.74 #> 10 5_town   Guilford              0.86 #> 11 5_town   Hamden                0.64 #> 12 5_town   Madison               0.86 #> 13 5_town   Milford               0.75 #> 14 5_town   New Haven             0.28 #> 15 5_town   North Branford        0.86 #> 16 5_town   North Haven           0.83 #> 17 5_town   Orange                0.91 #> 18 5_town   West Haven            0.51 #> 19 5_town   Woodbridge            0.89 geo_level_plot(homeownership,     value = share, hilite = \"#EA7FA2\",     title = \"Homeownership in Greater New Haven, 2020\" )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable labels from the 2023 ACS — acs_vars","title":"Variable labels from the 2023 ACS — acs_vars","text":"Dataset ACS variable labels, loaded tidycensus::load_variables() 2023 cleaned slightly.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable labels from the 2023 ACS — acs_vars","text":"","code":"acs_vars"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Variable labels from the 2023 ACS — acs_vars","text":"data frame 28261 rows 3 variables: name Variable code, first 6 characters table number last 3 digits variable number label Readable label variable concept Table name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Variable labels from the 2023 ACS — acs_vars","text":"US Census Bureau via tidycensus","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable labels from the 2023 ACS — acs_vars","text":"dataset updated annual ACS release, attribute year giving ACS endyear dataset.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable labels from the 2023 ACS — acs_vars","text":"","code":"# get the year attr(acs_vars, \"year\") #> [1] 2023"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/add_grps.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse variable into groups and sum — add_grps","title":"Collapse variable into groups and sum — add_grps","text":"function makes easy collapse multiple labels column groups, sum . advantage using simply relabeling factor column (forcats::fct_collapse) categories mutually exclusive. example, table populations age group, collapse aggregate total population, people 18+, people 65+ within single function call.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/add_grps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse variable into groups and sum — add_grps","text":"","code":"add_grps(data, grp_list, group = group, value = estimate, moe = NULL)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/add_grps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse variable into groups and sum — add_grps","text":"data data frame; honor grouping grp_list named list groups collapse group , either characters exactly match labels grouping column, numbers giving position label within unique values grouping column. Position numbers easier type correctly. group Bare column name giving groups data; converted factor value Bare column name values. Defaults estimate moe Bare column name margins error; supplied, MOEs sums included output","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/add_grps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse variable into groups and sum — add_grps","text":"data frame/tibble sums estimate. Retains grouping columns","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/add_grps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse variable into groups and sum — add_grps","text":"quickest fool-proof way create aggregate groups give positions within column's unique values. example column ages:   calculate total population positions 1-6, ages 18+ positions 3-6, ages 65+ positions 5-6. show_uniq() helper function finding positions.","code":"1 ages 0-5 2 ages 6-17 3 ages 18-34 4 ages 35-64 5 ages 65-84 6 ages 85+"},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/add_grps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse variable into groups and sum — add_grps","text":"","code":"# make a list of the positions of the groups you want to collapse # e.g. education$edu_level[2:16] has the education levels that we consider # less than high school education |>     dplyr::group_by(name) |>     add_grps(         list(             ages25plus = 1,             less_than_high_school = 2:16,             high_school_plus = 17:25,             bachelors_plus = 22:25         ),         group = edu_level, value = estimate     ) #> # A tibble: 20 × 3 #> # Groups:   name [5] #>    name       edu_level             estimate #>    <chr>      <fct>                    <dbl> #>  1 Bethany    ages25plus                3725 #>  2 Bethany    less_than_high_school      130 #>  3 Bethany    high_school_plus          3595 #>  4 Bethany    bachelors_plus            2193 #>  5 East Haven ages25plus               20768 #>  6 East Haven less_than_high_school     1724 #>  7 East Haven high_school_plus         19044 #>  8 East Haven bachelors_plus            5201 #>  9 Hamden     ages25plus               41017 #> 10 Hamden     less_than_high_school     2375 #> 11 Hamden     high_school_plus         38642 #> 12 Hamden     bachelors_plus           19132 #> 13 New Haven  ages25plus               84441 #> 14 New Haven  less_than_high_school    11853 #> 15 New Haven  high_school_plus         72588 #> 16 New Haven  bachelors_plus           31866 #> 17 West Haven ages25plus               35813 #> 18 West Haven less_than_high_school     4393 #> 19 West Haven high_school_plus         31420 #> 20 West Haven bachelors_plus           10399"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/availability.html","id":null,"dir":"Reference","previous_headings":"","what":"Check availability of datasets — check_cb_avail","title":"Check availability of datasets — check_cb_avail","text":"two functions check availability datasets needed formulate API queries. check_cb_avail finds available vintages major surveys Census Bureau's ACS Decennial programs mainland US. check_qwi_avail finds years QWI data available per state. Previously, datasets built package, ran risk outdated therefore missing availability new data. functions need read data internet, memoized results reasonably --date without make API calls repeatedly.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/availability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check availability of datasets — check_cb_avail","text":"","code":"check_cb_avail()  check_qwi_avail()"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/availability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check availability of datasets — check_cb_avail","text":"check_cb_avail: data frame columns vintage, program (e.g. \"acs\"), survey (e.g. \"acs5\"), title, returned Census Bureau API. check_qwi_avail`: data frame columns state FIPS code, earliest year available, recent year available.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/availability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check availability of datasets — check_cb_avail","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) {     cb_avail <- check_cb_avail()     cb_avail |>         dplyr::filter(program == \"dec\", vintage == 2020) } } # } if (FALSE) { # \\dontrun{ if (interactive()) {     qwi_avail <- check_qwi_avail()     qwi_avail |>         dplyr::filter(state_code == \"09\") } } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"function takes either list data frames, data frame column split , writes CSV files. returns list data frames, optionally row-binded back together. fits neatly middle longer piped workflow.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"","code":"batch_csv_dump(   data,   split_by,   path = \".\",   base_name = NULL,   bind = FALSE,   verbose = TRUE,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"data data frame list data frames split_by Bare column name variable split . data list, unnecessary ignored. path String giving path save files; defaults current working directory. base_name Optional string prepended file names. bind Logical: whether row-bind list data frames single data frame. Defaults FALSE, case list data frames returned. verbose Logical: whether print files' paths names written. Defaults TRUE. ... Arguments passed utils::write.table append logical. relevant file character     string.  TRUE, output appended     file.  FALSE, existing file name destroyed. quote logical value (TRUE FALSE)     numeric vector.  TRUE, character factor columns     surrounded double quotes.  numeric vector,     elements taken indices columns quote.      cases, row column names quoted written.      FALSE, nothing quoted. eol character(s) print end line (row).     example, eol = \"\\r\\n\" produce Windows' line endings     Unix-alike OS, eol = \"\\r\" produce files expected     Excel:mac 2004. na string use missing values data. dec string use decimal points numeric complex     columns: must single character. col.names either logical value indicating whether column     names x written along x,     character vector column names written.  See section     ‘CSV files’ meaning col.names = NA. qmethod character string specifying deal embedded     double quote characters quoting strings.  Must one     \"escape\" (default write.table), case     quote character escaped C style backslash,     \"double\" (default write.csv     write.csv2), case doubled.  can specify     just initial letter. fileEncoding character string: non-empty declares     encoding used file (connection) character data can     re-encoded written.  See file.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"Either list data frames (case bind = FALSE) single data frame (case bind = TRUE).","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/calc_shares.html","id":null,"dir":"Reference","previous_headings":"","what":"Make table of rates given a denominator — calc_shares","title":"Make table of rates given a denominator — calc_shares","text":"calc_shares makes easy divide values denominator within long-shaped data frame. example, works well table population groups multiple locations want divide population counts total population. optionally handles dividing margins error. Denote locations groupings using grouped data frame, passing bare column names ..., .","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/calc_shares.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make table of rates given a denominator — calc_shares","text":"","code":"calc_shares(   data,   ...,   group = group,   denom = \"total_pop\",   value = estimate,   moe = NULL,   digits = 2 )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/calc_shares.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make table of rates given a denominator — calc_shares","text":"data data frame ... Optional; bare column names used groupings. group Bare column name groups given–, denominator value found column denom String; denominator filter group value Bare column name values. Replaces previous estimate argument, (now) still defaults column named estimate moe Bare column name margins error; supplied, MOE shares included output digits Number digits round ; defaults 2.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/calc_shares.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make table of rates given a denominator — calc_shares","text":"tibble/data frame shares (optionally MOE shares) subgroup values within denominator group. Shares given denominator group blank.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/calc_shares.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make table of rates given a denominator — calc_shares","text":"","code":"edu <- tibble::tribble(     ~name, ~edu, ~estimate,     \"Hamden\", \"ages25plus\", 41017,     \"Hamden\", \"bachelors\", 8511,     \"Hamden\", \"graduate\", 10621,     \"New Haven\", \"ages25plus\", 84441,     \"New Haven\", \"bachelors\", 14643,     \"New Haven\", \"graduate\", 17223 ) edu |>     dplyr::group_by(name) |>     calc_shares(group = edu, denom = \"ages25plus\", value = estimate) #> # A tibble: 6 × 4 #> # Groups:   name [2] #>   name      edu        estimate share #>   <chr>     <fct>         <dbl> <dbl> #> 1 Hamden    ages25plus    41017 NA    #> 2 Hamden    bachelors      8511  0.21 #> 3 Hamden    graduate      10621  0.26 #> 4 New Haven ages25plus    84441 NA    #> 5 New Haven bachelors     14643  0.17 #> 6 New Haven graduate      17223  0.2"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Five Connecticuts clusters — ct5_clusters","title":"Five Connecticuts clusters — ct5_clusters","text":"Cluster assignments towns \"5 Connecticuts\"–urban core, urban periphery, suburban, rural, wealthy–based median family income, poverty rate, population density.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Five Connecticuts clusters — ct5_clusters","text":"","code":"ct5_clusters"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Five Connecticuts clusters — ct5_clusters","text":"data frame 169 rows 2 variables: town Town name cluster Cluster label","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Five Connecticuts clusters — ct5_clusters","text":"Levy, Don: Five Connecticuts 2010 Update. (2015). Produced Siena College Research Institute DataHaven based original 1990 2000 designations \"Levy, Don, Orlando Rodriguez, Wayne Villemez. 2004. Changing Demographics Connecticut - 1990 2000. Part 2: Five Connecticuts. Storrs, Connecticut: University Connecticut, Connecticut State Data Center, Series, . OP 2004-01.\"","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cwi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cwi: Prep for DataHaven's Community Wellbeing Index — cwi-package","title":"cwi: Prep for DataHaven's Community Wellbeing Index — cwi-package","text":"collection functions collecting analyzing Census data sources write 2019 Community Wellbeing Index reports. also contains reference tables local geographies—neighborhoods, regions, etc—commonly used ACS table numbers.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cwi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cwi: Prep for DataHaven's Community Wellbeing Index — cwi-package","text":"Maintainer: Camille Seaberry camille@ctdatahaven.org (ORCID)","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable labels from the Decennial Census — decennial_vars","title":"Variable labels from the Decennial Census — decennial_vars","text":"Dataset Decennial Census variable labels, loaded tidycensus::load_variables() cleaned slightly. 2010 2020 versions saved separately different variable code formats. decennial_vars attribute year giving year dataset.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable labels from the Decennial Census — decennial_vars","text":"","code":"decennial_vars  decennial_vars10"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Variable labels from the Decennial Census — decennial_vars","text":"data frame 8959 rows (2010) 9067 rows (2020) 3 variables: name Variable code containing table number variable number label Readable label variable concept Table name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Variable labels from the Decennial Census — decennial_vars","text":"US Census Bureau via tidycensus","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable labels from the Decennial Census — decennial_vars","text":"","code":"# get the year attr(decennial_vars, \"year\") #> [1] 2020"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/education.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS demo data - educational attainment — education","title":"ACS demo data - educational attainment — education","text":"table educational attainment data adults ages 25 New Haven-area towns obtained tidycensus::get_acs, used testing examples.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/education.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS demo data - educational attainment — education","text":"","code":"education"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/education.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACS demo data - educational attainment — education","text":"data frame 125 rows 4 variables: name Town name edu_level Educational attainment estimate Estimated count moe Margin error","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix names of COGs — fix_cogs","title":"Fix names of COGs — fix_cogs","text":"Connecticut rolls use COGs place counties, names COGs might differ depending ask (Census Bureau, CTOPM, COGs ). crosswalk cwi::xwalk uses names come Census; function renames match COGs' apparent preferences.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix names of COGs — fix_cogs","text":"","code":"fix_cogs(x)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix names of COGs — fix_cogs","text":"x vector names, either character factor.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix names of COGs — fix_cogs","text":"vector length type input","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix names of COGs — fix_cogs","text":"","code":"fix_cogs(names(regions[1:6])) #> [1] \"6 wealthiest Fairfield County\" \"Capitol Region COG\"            #> [3] \"Eastern cities\"                \"Fairfield County\"              #> [5] \"Connecticut Metro COG\"         \"Connecticut Metro COG\""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly make a ggplot to view data by geographic level — geo_level_plot","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"quick way make bar chart, Cleveland dotplot, histogram set data, filled geographic level.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"","code":"geo_level_plot(   data,   name = name,   value = value,   level = level,   type = c(\"col\", \"hist\", \"point\"),   hilite = \"dodgerblue\",   title = NULL,   dark_gray = \"gray20\",   light_gray = \"gray60\",   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"data data frame use plotting. name Bare column name containing names, .e. independent variable. value Bare column name containing values, .e. dependent variable. level Bare column name containing geographic levels fill. type String: one \"col\" (bar chart, using ggplot2::geom_col(), \"point\" (dot plot, using ggplot2::geom_point()), \"hist\" (histogram, using ggplot2::geom_histogram()); defaults \"col\". hilite String giving highlight color, used lowest geography present. title String giving title, desired, plot. dark_gray String giving named gray color highest geography; defaults \"gray20\". light_gray String giving named gray color second lowest geography; defaults \"gray60\". ... additional parameters pass underlying geom function.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"ggplot","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/gnh_tenure.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS demo data - tenure — gnh_tenure","title":"ACS demo data - tenure — gnh_tenure","text":"table housing tenure data Greater New Haven obtained multi_geo_acs, used testing examples.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/gnh_tenure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS demo data - tenure — gnh_tenure","text":"","code":"gnh_tenure"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/gnh_tenure.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACS demo data - tenure — gnh_tenure","text":"data frame 45 rows 5 variables: level Geographic level name Geography name tenure Tenure: total households, owner-occupied, renter-occupied estimate Estimated count share Calculated share households, NA total","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inflation adjustments — adj_inflation","title":"Calculate inflation adjustments — adj_inflation","text":"adj_inflation modeled blscrapeR::inflation_adjust joins data frame inflation adjustment table Bureau Labor Statistics' Consumer Price Index, calculates adjusted values. returns original data frame two additional columns adjustment factors adjustment values. get_cpi basic version adj_inflation. adjust data , just fetches CPI table used adjustments. handles couple options: either seasonally-adjusted unadjusted, either annual averages monthly values. adj_inflation, contrast, fixed annual seasonally adjusted. adj_inflation high-level convenience function, get_cpi better suited complex adjustments , setting seasonality periodicity.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inflation adjustments — adj_inflation","text":"","code":"adj_inflation(   data,   value,   year,   base_year = endyears[[\"acs\"]],   verbose = TRUE,   key = NULL )  get_cpi(   years,   base = endyears[[\"acs\"]],   seasonal = FALSE,   monthly = FALSE,   verbose = TRUE,   key = NULL )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate inflation adjustments — adj_inflation","text":"Bureau Labor Statistics via API https://www.bls.gov/developers/home.htm","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate inflation adjustments — adj_inflation","text":"data data frame containing monetary values year. value Bare column name monetary values; safety, default. year Bare column name years; safety, default. base_year Year base inflation amounts. Defaults 2023, corresponds saying \"... adjusted 2023 dollars.\" verbose Logical: TRUE (default), print overview information series used, returned API. key string giving BLS API key. NULL (default), take value Sys.getenv(\"BLS_KEY\"). years Numeric vector: years CPI values get base Base reference point, either year date, something can easily coerced date. just year, default January 1 year. Default: 2023 seasonal Logical, whether get seasonally-adjusted unadjusted values. Default: FALSE monthly Logical. TRUE, return monthly values. Otherwise, CPI values averaged year. Default: FALSE","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate inflation adjustments — adj_inflation","text":"adj_inflation: original data frame two additional columns: adjustment factors, adjusted values. adjusted values column named based name supplied value; e.g. value = avg_wage, adjusted column named adj_avg_wage. get_cpi: data frame/tibble columns date (either numeric years proper Date objects), CPI value, adjustment factor based base argument.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate inflation adjustments — adj_inflation","text":"Note: functions make API calls, internet access required. According BLS research page, series functions use best suited data going back 2000, methodology changed. previous years, accurate version index available site.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/inflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate inflation adjustments — adj_inflation","text":"","code":"if (FALSE) { # \\dontrun{ wages <- data.frame(     fiscal_year = 2010:2016,     wage = c(50000, 51000, 52000, 53000, 54000, 55000, 54000) ) adj_inflation(wages, value = wage, year = fiscal_year, base_year = 2016) } # } if (FALSE) { # \\dontrun{ get_cpi(2018:2024, base = 2024, monthly = FALSE) get_cpi(2018:2024, base = \"2024-12-01\", monthly = TRUE) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"Given numeric vector, returns factor values cut n number breaks using Jenks/Fisher algorithms. algorithm(s) sets breaks way highlights high low values well. good use choropleths need convey imbalances inequities.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"","code":"jenks(x, n = 5, true_jenks = FALSE, labels = NULL, ...)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"x numeric vector cut n Number bins, Default: 5 true_jenks Logical: \"true\" Jenks algorithm used? false, uses faster Fisher-Jenks algorithm. See classInt::classIntervals() docs discussion. Default: FALSE labels string vector used bin labels, Default: NULL ... Arguments passed base::cut","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"factor length x","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"","code":"set.seed(123) values <- rexp(30, 0.8) jenks(values, n = 4) #>  [1] (0.535,1.36]   (0.535,1.36]   (1.36,2.71]    [0.0364,0.535] [0.0364,0.535] #>  [6] [0.0364,0.535] [0.0364,0.535] [0.0364,0.535] (2.71,5.05]    [0.0364,0.535] #> [11] (0.535,1.36]   (0.535,1.36]   [0.0364,0.535] [0.0364,0.535] [0.0364,0.535] #> [16] (0.535,1.36]   (1.36,2.71]    (0.535,1.36]   (0.535,1.36]   (2.71,5.05]    #> [21] (0.535,1.36]   (0.535,1.36]   (1.36,2.71]    (1.36,2.71]    (1.36,2.71]    #> [26] (1.36,2.71]    (1.36,2.71]    (1.36,2.71]    [0.0364,0.535] (0.535,1.36]   #> Levels: [0.0364,0.535] (0.535,1.36] (1.36,2.71] (2.71,5.05]"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly add the labels of census variables — label_decennial","title":"Quickly add the labels of census variables — label_decennial","text":"multi_geo_* functions, underlying tidycensus::get_* functions, return data tables variable codes (e.g. \"B01001_003\"), can joined lookup tables get readable labels (e.g. \"Total!!Male!!5 years\"). functions just quick wrappers around common task joining data frame variable codes labels.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly add the labels of census variables — label_decennial","text":"","code":"label_decennial(data, year = 2020, sumfile = \"dhc\", variable = variable)  label_acs(data, year = 2023, survey = \"acs5\", variable = variable)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly add the labels of census variables — label_decennial","text":"data data frame/tibble. year year data; defaults 2023 ACS, 2020 decennial. sumfile label_decennial, string: summary file use. Defaults \"dhc\", code used 2020. 2010 used summary files labeled \"sf1\" \"sf3\". variable bare column name variable codes; defaults variable, returned multi_geo_* tidycensus::get_* functions. survey label_acs, string: ACS estimate use. Defaults 5-year (\"acs5\"), can also 1-year (\"acs1\") 3-year (\"acs3\"), though 1-year 3-year limited availability.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly add the labels of census variables — label_decennial","text":"tibble number rows data additional column called label","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly add the labels of census variables — label_decennial","text":"","code":"if (FALSE) { # \\dontrun{ acs_pops <- multi_geo_acs(\"B01001\") label_acs(acs_pops) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"Fetch monthly LAUS data list locations given time period, modeled blscrapeR::bls_api. Requires BLS API key.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"","code":"laus_trend(   names = NULL,   startyear,   endyear,   state = \"09\",   measures = \"all\",   annual = FALSE,   verbose = TRUE,   key = NULL )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"names character vector place names look , either towns /counties. startyear Numeric; first year range endyear Numeric; last year range state string: either name two-digit FIPS code US state. Required; defaults \"09\" (Connecticut). measures character vector measures, containing combination \"unemployment rate\", \"unemployment\", \"employment\", \"labor force\", \"\" (default) shorthand . annual Logical: whether include annual averages along monthly data. Defaults FALSE. verbose Logical: TRUE (default), print overview information series used, returned API. key string giving BLS API key. NULL (default), take value Sys.getenv(\"BLS_KEY\").","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"data frame, slightly cleaned API returns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"","code":"if (FALSE) { # \\dontrun{ laus_trend(c(\"Connecticut\", \"New Haven\", \"Hamden\"), 2014, 2017, annual = TRUE) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/make_grps.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse variable into subgroup positions, for use in add_grps. — make_grps","title":"Collapse variable into subgroup positions, for use in add_grps. — make_grps","text":"Collapse variable subgroup positions, use add_grps.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/make_grps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse variable into subgroup positions, for use in add_grps. — make_grps","text":"","code":"make_grps(x, grps)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/make_grps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse variable into subgroup positions, for use in add_grps. — make_grps","text":"x Character vector grps Named list variable values positions within vector x","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/make_grps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse variable into subgroup positions, for use in add_grps. — make_grps","text":"Named list variable values given positions","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":null,"dir":"Reference","previous_headings":"","what":"Names and GEOIDs of regional MSAs — msa","title":"Names and GEOIDs of regional MSAs — msa","text":"reference dataset metropolitan statistical areas (MSAs) US, marked whether New England state.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names and GEOIDs of regional MSAs — msa","text":"","code":"msa"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names and GEOIDs of regional MSAs — msa","text":"data frame 392 rows 3 variables: geoid GEOID/FIPS code name Name MSA region String: whether MSA inside outside New England","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Names and GEOIDs of regional MSAs — msa","text":"US Census Bureau via tidycensus. Note 2020.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch an ACS table with multiple geography levels — multi_geo_acs","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"Fetch data table ACS via tidycensus choice geographies multiple levels. geographies made aggregates, .e. neighborhoods made tracts regions made towns, returned table estimates summed margins error calculated whole area. geographic levels null excluded.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"","code":"multi_geo_acs(   table,   year = endyears[[\"acs\"]],   towns = \"all\",   regions = NULL,   counties = \"all\",   state = \"09\",   neighborhoods = NULL,   tracts = NULL,   blockgroups = NULL,   pumas = NULL,   msa = FALSE,   us = FALSE,   new_england = TRUE,   nhood_name = \"name\",   nhood_geoid = NULL,   nhood_weight = \"weight\",   survey = c(\"acs5\", \"acs1\"),   verbose = TRUE,   key = NULL,   sleep = 0,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"table string giving ACS table number. year year ACS table; currently defaults 2023 (recent available). towns character vector names towns include; \"\" (default) towns optionally filtered county; NULL fetch town-level table. regions named list regions town names (defaults NULL). counties character vector names counties include; \"\" (default) counties state; NULL fetch county-level table. state string: either name two-digit FIPS code US state. Required; defaults \"09\" (Connecticut). neighborhoods data frame columns neighborhood name, GEOID either tracts block groups, weight, e.g. share tract assigned neighborhood. included, weighted sums MOEs returned neighborhoods. Try match formatting built-neighborhood tables. tracts character vector 11-digit FIPS codes tracts include, \"\" tracts optionally filtered county. Defaults NULL. blockgroups character vector 12-digit FIPS codes block groups include, \"\" block groups optionally filtered county. Defaults NULL. pumas character vector 7-digit FIPS codes public use microdata areas (PUMAs) include, \"\" PUMAs optionally filtered county. filter redundancies–large towns standalone PUMAs, sparsely-population counties. Defaults NULL. msa Logical: whether fetch New England states' metropolitan statistical areas. Defaults FALSE. us Logical: whether fetch US-level table. Defaults FALSE. new_england Logical: TRUE (default), limits metro areas just New England states. nhood_name String giving name column data frame neighborhoods contains neighborhood names. Previously bare column name, consistency changes COG-based FIPS codes, needs string. relevant neighborhood weight table used. Defaults \"name\" match neighborhood lookup datasets. nhood_geoid String giving name column neighborhoods contains neighborhood GEOIDs, either tracts block groups. relevant neighborhood weight table used. changes FIPS codes, longer default. nhood_weight String giving name column neighborhoods contains weights neighborhood names tract/block groups. relevant neighborhood weight table used. Defaults \"weight\" match neighborhood lookup datasets. survey string: ACS estimate use. Defaults 5-year (\"acs5\"), can also 1-year (\"acs1\"). verbose Logical: whether print summary geographies included. Defaults TRUE. key String: Census API key. NULL (default), takes value Sys.getenv(\"CENSUS_API_KEY\"). sleep Number seconds, , sleep API call. might help Census API's tendency crash, many geographies, add sizable time. Probably add seconds. ... Arguments passed tidycensus::get_acs variables Character string vector character strings variable IDs. tidycensus automatically returns estimate margin error associated variable. output One \"tidy\" (default) row represents enumeration unit-variable combination, \"wide\" row represents enumeration unit variables columns. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`. Defaults NULL. zcta zip code tabulation area(s) requesting data. Specify single value vector values get data one ZCTA. Numeric character ZCTA GEOIDs accepted. specifying ZCTAs, geography must set `\"zcta\"` `state` must specified `county` left `NULL`. Defaults NULL. geometry FALSE (default), return regular tibble ACS data. TRUE, uses tigris package return sf tibble simple feature geometry `geometry` column. keep_geo_vars TRUE, keeps variables Census shapefile obtained tigris.  Defaults FALSE. shift_geo (deprecated) TRUE, returns geometry Alaska Hawaii shifted thematic mapping entire US. Geometry originally obtained albersusa R package. May 2021, recommend using tigris::shift_geometry() instead. summary_var Character string \"summary variable\" ACS included output. Usually variable (e.g. total population) want use denominator comparison. moe_level confidence level returned margin error.  One 90 (default), 95, 99. show_call TRUE, display call made Census API. can useful debugging determining error messages returned due tidycensus Census API. Copy API call browser see returned API directly. Defaults FALSE.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"tibble GEOID, name, variable code, estimate, moe, geography level, state, year, applicable, chosen ACS table.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"function essentially calls tidycensus::get_acs() multiple times, depending geographic levels chosen, minor cleaning, filtering, aggregation. Note underlying tidycensus::get_acs() requires Census API key. case tidycensus functions, multi_geo_acs assumes key stored CENSUS_API_KEY .Renviron source environment variables. See tidycensus::census_api_key() installation.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"","code":"if (FALSE) { # \\dontrun{ multi_geo_acs(\"B01003\", 2018,     towns = \"all\",     regions = list(inner_ring = c(\"Hamden\", \"East Haven\", \"West Haven\")),     counties = \"New Haven County\",     tracts = unique(new_haven_tracts$geoid) )  multi_geo_acs(\"B01003\", 2023,     towns = \"Bridgeport\",     counties = \"Greater Bridgeport COG\",     neighborhoods = bridgeport_tracts,     nhood_name = \"name\",     nhood_geoid = \"geoid_cog\" ) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"Fetch data table decennial census via tidycensus choice geographies multiple levels. geographies made aggregates, .e. neighborhoods made tracts regions made towns, returned table estimates summed whole area. geographic levels null excluded.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"","code":"multi_geo_decennial(   table,   year = endyears[[\"decennial\"]],   towns = \"all\",   regions = NULL,   counties = \"all\",   state = \"09\",   neighborhoods = NULL,   tracts = NULL,   blockgroups = NULL,   msa = FALSE,   us = FALSE,   new_england = TRUE,   nhood_name = \"name\",   nhood_geoid = NULL,   nhood_weight = \"weight\",   sumfile = c(\"dhc\", \"sf1\", \"sf3\", \"pl\"),   verbose = TRUE,   key = NULL,   sleep = 0,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"table string giving decennial census table number. generally formatted one letters, 3 numbers, optionally letter. year year census table; currently defaults 2020. towns character vector towns include; \"\" (default) towns optionally filtered county; NULL fetch town-level table. regions named list regions town names (defaults NULL). counties character vector counties include; \"\" (default) counties state; NULL fetch county-level table. state string: either name two-digit FIPS code US state. Required; defaults \"09\" (Connecticut). neighborhoods data frame columns neighborhood name, GEOID tracts, weight, e.g. share tract assigned neighborhood. included, weighted sums returned neighborhoods. Unlike multi_geo_acs, take block groups. tracts character vector 11-digit FIPS codes tracts include, \"\" tracts optionally filtered county. Defaults NULL. blockgroups character vector 12-digit FIPS codes block groups include, \"\" block groups optionally filtered county. Defaults NULL. msa Logical: whether fetch New England states' metropolitan statistical areas. Defaults FALSE. us Logical: whether fetch US-level table. Defaults FALSE. new_england Logical: TRUE (default), limits metro areas just New England states. nhood_name String giving name column data frame neighborhoods contains neighborhood names. Previously bare column name, consistency changes COG-based FIPS codes, needs string. relevant neighborhood weight table used. Defaults \"name\" match neighborhood lookup datasets. nhood_geoid String giving name column neighborhoods contains neighborhood GEOIDs, either tracts block groups. relevant neighborhood weight table used. changes FIPS codes, longer default. nhood_weight String giving name column neighborhoods contains weights neighborhood names tract/block groups. relevant neighborhood weight table used. Defaults \"weight\" match neighborhood lookup datasets. sumfile string giving summary file pull . Note codes changed 2010 2020. Now default year 2020, default sumfile \"dhc\". 2010, either \"sf1\", less commonly \"sf3\". Use \"pl\" 2020 redistricting data. verbose Logical: whether print summary geographies included. Defaults TRUE. key String: Census API key. NULL (default), takes value Sys.getenv(\"CENSUS_API_KEY\"). sleep Number seconds, , sleep API call. might help Census API's tendency crash, many geographies, add sizable time. Probably add seconds. ... Arguments passed tidycensus::get_decennial variables Character string vector character strings variable IDs. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`.  Defaults NULL. geometry FALSE (default), return regular tibble ACS data. TRUE, uses tigris package return sf tibble simple feature geometry `geometry` column. output One \"tidy\" (default) row represents enumeration unit-variable combination, \"wide\" row represents enumeration unit variables columns. keep_geo_vars TRUE, keeps variables Census shapefile obtained tigris.  Defaults FALSE. shift_geo (deprecated) TRUE, returns geometry Alaska Hawaii shifted thematic mapping entire US. Geometry originally obtained albersusa R package.  May 2021, recommend using tigris::shift_geometry() instead. summary_var Character string \"summary variable\" decennial Census included output. Usually variable (e.g. total population) want use denominator comparison. pop_group population group code like request data.  Applies summary files population group breakdowns available like Detailed DHC-file. pop_group_label TRUE, return \"pop_group_label\" column contains label population group.  Defaults FALSE. show_call TRUE, display call made Census API. can useful debugging determining error messages returned due tidycensus Census API. Copy API call browser see returned API directly. Defaults FALSE.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"tibble GEOID, name, variable code, estimate, moe, geography level, state, year, applicable, chosen table.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"function essentially calls tidycensus::get_decennial() multiple times, depending geographic levels chosen, minor cleaning, filtering, aggregation. Note underlying tidycensus::get_decennial() requires Census API key. case tidycensus functions, multi_geo_decennial assumes key stored CENSUS_API_KEY .Renviron source environment variables. See tidycensus::census_api_key() installation. advised decennial table numbers generally change year year, looking trends, check data.census.gov another source make sure tables meaning. Setting verbose = TRUE helpful well.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"","code":"if (FALSE) { # \\dontrun{ multi_geo_decennial(\"P1\", 2020,     sumfile = \"dhc\",     towns = \"all\",     regions = list(inner_ring = c(\"Hamden\", \"East Haven\", \"West Haven\")),     counties = \"New Haven County\" ) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS industry codes — naics_codes","title":"NAICS industry codes — naics_codes","text":"dataset industry names NAICS codes. main sectors, detailed industry codes.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS industry codes — naics_codes","text":"","code":"naics_codes"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NAICS industry codes — naics_codes","text":"data frame 21 rows 3 variables: industry NAICS code label Industry name ind_level Sector level: either \"\" industries, \"2\" sectors","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NAICS industry codes — naics_codes","text":"just filtered version file downloaded LEHD","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"Data frames neighborhoods Connecticut cities sf geometries. Includes Bridgeport, Hartford/West Hartford, New Haven, Stamford.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"","code":"bridgeport_sf  hartford_sf  new_haven_sf  stamford_sf"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"Data frames (classes data.frame sf). , name name neighborhood, geometry shape neighborhood either sfc_POLYGON sfc_MULTIPOLYGON object. hartford_sf contains additional variable, town, marks neighborhoods Hartford West Hartford. object class sf (inherits data.frame) 13 rows 2 columns. object class sf (inherits data.frame) 27 rows 3 columns. object class sf (inherits data.frame) 20 rows 2 columns. object class sf (inherits data.frame) 13 rows 2 columns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"neighborhood boundaries, exception West Hartford, come directly respective cities' online data portals. West Hartford neighborhood boundaries based directly current tracts; common names corresponding tracts scraped third-party real estate site.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":null,"dir":"Reference","previous_headings":"","what":"City neighborhoods by tract — neighborhood_tracts","title":"City neighborhoods by tract — neighborhood_tracts","text":"Datasets neighborhoods New Haven, Hartford/West Hartford, Stamford, Bridgeport. tracts cross one neighborhood; use weight column aggregating values populations. Previously included block group version New Haven, removed; also renaming nhv_tracts new_haven_tracts consistency.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"City neighborhoods by tract — neighborhood_tracts","text":"","code":"new_haven_tracts  bridgeport_tracts  stamford_tracts  hartford_tracts  new_haven_tracts19  bridgeport_tracts19  stamford_tracts19  hartford_tracts19"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"City neighborhoods by tract — neighborhood_tracts","text":"data frame; number rows depends city. town hartford_tracts, name town, Hartford West Hartford neighborhoods included; otherwise, town variable needed name Neighborhood name geoid 11-digit FIPS code tract tract 6-digit FIPS code tract; geoid missing state & county components. weight Share tract's households neighborhood","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"City neighborhoods by tract — neighborhood_tracts","text":"updated 2020 tract definitions. still 2019 versions weight tables names ending \"19\"; time , stick around use pre-2020 data. Note also error tables Stamford Hartford/West Hartford neighborhoods given extra tracts outside town boundaries. particularly affect counts, population totals neighborhood, based poor alignment spatial overlays. Fixed 5/22/2024.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Census occupation codes — occ_codes","title":"Census occupation codes — occ_codes","text":"dataset occupation groups descriptions Census (OCC) codes SOC codes. Occupations grouped hierarchically. filtered Census crosswalk include top-level groups, except broad management, business, science, arts occupations group; one, second level groups treated major one. Often just want major groups, can filter is_major_grp column.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Census occupation codes — occ_codes","text":"","code":"occ_codes"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Census occupation codes — occ_codes","text":"data frame 32 rows 5 columns: is_major_grp Logical: whether highest level included occ_group Major occupation group name occ_code Census occupation code soc_code SOC code description Full text occupation name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Census occupation codes — occ_codes","text":"US Census Bureau's industry & occupation downloads","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":null,"dir":"Reference","previous_headings":"","what":"Proxy PUMAs — proxy_pumas","title":"Proxy PUMAs — proxy_pumas","text":"list 2 data frames giving PUMAs make reasonable approximations designated regions, weights apply population- household-based measures. data frame labeled county uses county-based PUMAs 2021 ACS values; data frame cog uses new COG-based PUMAs 2022 ACS values. working PUMS data weighted surveys, multiply weights proxy table weights survey account much PUMA overlaps region.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proxy PUMAs — proxy_pumas","text":"","code":"proxy_pumas"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Proxy PUMAs — proxy_pumas","text":"list 2 data frames, county cog, 22 56 rows, respectively, 6 variables: puma 7-digit PUMA FIPS code region Region name pop Total population overlapping area region PUMA hh Total households overlapping area region PUMA pop_weight Population weight: share PUMA's population included region, used population-based survey analysis hh_weight Household weight: share PUMA's households included region, used household-based survey analysis","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Proxy PUMAs — proxy_pumas","text":"2021 & 2022 5-year ACS","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proxy PUMAs — proxy_pumas","text":"county-based table includes just non-county regions (e.g. Greater New Haven), COG-based table also includes \"legacy\" counties (e.g. New Haven County), since assume even data released counties, organizations might still want estimates based geographies. See maps proxies weights : https://ct-data-haven.github.io/cogs/proxy-geos.html NOTE: PUMAs included one region. joining tables survey data, make sure allowing duplicates PUMAs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proxy PUMAs — proxy_pumas","text":"","code":"# proxies made from county-based PUMAs, use for pre-2022 ACS or other datasets proxy_pumas$county #> # A tibble: 22 × 6 #>    puma    region                pop    hh pop_weight hh_weight #>    <chr>   <chr>               <dbl> <dbl>      <dbl>     <dbl> #>  1 0900101 Greater Bridgeport  69339 23805      0.584     0.589 #>  2 0900104 Greater Bridgeport 148529 52914      1         1     #>  3 0900105 Greater Bridgeport 108117 38743      0.613     0.600 #>  4 0900300 Greater Hartford   154355 59417      0.987     0.986 #>  5 0900301 Greater Hartford   110423 44599      1         1     #>  6 0900302 Greater Hartford   121562 46879      1         1     #>  7 0900303 Greater Hartford   165411 66333      1         1     #>  8 0900304 Greater Hartford    43474 17149      0.382     0.381 #>  9 0900305 Greater Hartford   111643 44350      1         1     #> 10 0900306 Greater Hartford   119553 49100      1         1     #> # ℹ 12 more rows  # proxies made from COG-based PUMAs proxy_pumas$cog #> # A tibble: 56 × 6 #>    puma    region                pop    hh pop_weight hh_weight #>    <chr>   <chr>               <dbl> <dbl>      <dbl>     <dbl> #>  1 0920703 Fairfield County    41206 15774      0.258     0.248 #>  2 0920801 Fairfield County   148470 55550      1         1     #>  3 0920802 Fairfield County   177911 61947      1         1     #>  4 0920901 Fairfield County   198911 76182      1         1     #>  5 0920902 Fairfield County   104825 36465      1         1     #>  6 0920903 Fairfield County   118282 44997      1         1     #>  7 0920904 Fairfield County   168766 61392      0.850     0.843 #>  8 0920801 Greater Bridgeport 148470 55550      1         1     #>  9 0920802 Greater Bridgeport 177911 61947      1         1     #> 10 0920201 Greater Hartford   121057 48277      1         1     #> # ℹ 46 more rows"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly create a choropleth sketch — quick_map","title":"Quickly create a choropleth sketch — quick_map","text":"quick way create choropleth sketch town-, neighborhood-, tract-level data. Uses corresponding sf object; June 2018, sf object must one ships package, otherwise globally available.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly create a choropleth sketch — quick_map","text":"","code":"quick_map(   data,   name = name,   value = value,   level = c(\"town\", \"neighborhood\", \"tract\"),   city = NULL,   n = 5,   palette = \"GnBu\",   title = NULL,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly create a choropleth sketch — quick_map","text":"data data frame containing data geography. name Bare column name location names join; defaults name. value Bare column name numeric values map; defaults value. level String giving desired geographic level; must one \"town\", \"neighborhood\", \"tract\". Defaults \"town\". city geographic level neighborhood, string corresponding city name match spatial object. n Number breaks bin values; defaults (approximately) 5. palette String ColorBrewer palette; see RColorBrewer::RColorBrewer() possible values. Defaults \"GnBu\". title String giving title, desired, plot. ... Arguments passed ggplot2::geom_sf mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also set one \"polygon\", \"line\", \"point\" override default legend. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly create a choropleth sketch — quick_map","text":"ggplot","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly create a choropleth sketch — quick_map","text":"","code":"if (FALSE) { # \\dontrun{ tidycensus::get_acs(     geography = \"county subdivision\", year = 2023,     variables = c(median_age = \"B01002_001\"), state = \"09\", county = \"170\" ) |>     town_names(NAME) |>     dplyr::filter(NAME %in% regions$`Greater New Haven`) |>     quick_map(name = NAME, value = estimate, title = \"Median age by town, 2023\", n = 6) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":null,"dir":"Reference","previous_headings":"","what":"Get employment counts and total payroll over time — qwi_industry","title":"Get employment counts and total payroll over time — qwi_industry","text":"gets data Quarterly Workforce Indicators (QWI) via Census API. alternative censusapi fetches set variables (employees payroll) makes somewhat dynamic API call. API returns maximum 10 years data; calling function 10 years require multiple API calls, takes little longer.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get employment counts and total payroll over time — qwi_industry","text":"","code":"qwi_industry(   years,   industries = cwi::naics_codes[[\"industry\"]],   state = \"09\",   counties = NULL,   annual = FALSE,   key = NULL,   retry = 5 )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get employment counts and total payroll over time — qwi_industry","text":"years numeric vector one years get data industries character vector NAICS industry codes; default 20 sectors plus \"industries\" dataset naics_codes. state string length 1 representing state's FIPS code, name, two-letter abbreviation; defaults \"09\" Connecticut counties character vector county FIPS codes, \"\" counties. NULL (default), return data just state level. Connecticut, now need COGs; data changed retroactively. annual Logical, whether return annual averages quarterly data (default) . key Census API key. NULL, defaults environmental variable \"CENSUS_API_KEY\", set tidycensus::census_api_key(). retry number times retry API call(s), since server comes can bit finicky.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get employment counts and total payroll over time — qwi_industry","text":"data frame / tibble","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get employment counts and total payroll over time — qwi_industry","text":"Note looking data quarterly, payroll reported quarter, yearly payroll may accustomed . November 2021, payroll data seems missing database; even QWI Explorer app just turns empty.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get employment counts and total payroll over time — qwi_industry","text":"","code":"if (FALSE) { # \\dontrun{ qwi_industry(2012:2017, industries = c(\"23\", \"62\"), counties = \"170\") } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions of Connecticut — regions","title":"Regions of Connecticut — regions","text":"dataset Connecticut regions town","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions of Connecticut — regions","text":"","code":"regions"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regions of Connecticut — regions","text":"named list vectors, names give names regions vectors give names towns making region, including regional councils governments.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regions of Connecticut — regions","text":"DataHaven internal CT OPM","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"School districts by town — school_dists","title":"School districts by town — school_dists","text":"crosswalk Connecticut towns school districts, including regional districts. small towns operate schools included , whereas towns part regional district operate schools, commonly elementary.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"School districts by town — school_dists","text":"","code":"school_dists"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"School districts by town — school_dists","text":"data frame 196 rows 2 variables: district School district name town Name town included district","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"School districts by town — school_dists","text":"Distinct town-level district names come state's data.world. Regional districts towns come combing school district websites.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"School districts by town — school_dists","text":"Note aggregating region, Hartford-area regional district CREC included , spans many towns also run schools.CREC significant enough size generally included Greater Hartford aggregations district comparisons alongside e.g. Hartford West Hartford.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate labels given to ACS data — separate_acs","title":"Separate labels given to ACS data — separate_acs","text":"quick wrapper around tidyr::separate() written match standard formatting used ACS variable labels. generally take form e.g. \"Total!!Male!!5 9 years\". function separate values \"!!\" optionally drop resulting \"Total\" column, generally constant entire data frame.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate labels given to ACS data — separate_acs","text":"","code":"separate_acs(   data,   col = label,   into = NULL,   sep = \"!!\",   drop_total = FALSE,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate labels given to ACS data — separate_acs","text":"data data frame returned multi_geo_acs() tidycensus::get_acs(). col Bare column name ACS labels . Default: label Character vector names new variables. NULL (default), names assigned \"x1\", \"x2,\" etc. want include Total column, character vector needs include groups Total (see examples). sep Character: separator columns. Default: '!!' drop_total Logical, whether include \"Total\" column comes separating ACS data. Default: FALSE ... Arguments passed tidyr::separate remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. extra sep character vector, controls happens many pieces. three valid options: \"warn\" (default): emit warning drop extra values. \"drop\": drop extra values without warning. \"merge\": splits length() times fill sep character vector, controls happens enough pieces. three valid options: \"warn\" (default): emit warning fill right \"right\": fill missing values right \"left\": fill missing values left","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate labels given to ACS data — separate_acs","text":"data frame","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate labels given to ACS data — separate_acs","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) {     age <- label_acs(multi_geo_acs(\"B01001\"))      # Default: allow automatic labeling, in this case x1, x2, x3     separate_acs(age)      # Drop Total column, use automatic labeling (x1 & x2)     separate_acs(age, drop_total = TRUE)      # Keep Total column; assign names total, sex, age     separate_acs(age, into = c(\"total\", \"sex\", \"age\"))      # Drop Total column; only need to name sex & age     separate_acs(age, into = c(\"sex\", \"age\"), drop_total = TRUE)      # Carried over from tidyr::separate, using NA in place of the Total column     # will also drop that column and yield the same as the previous example     separate_acs(age, into = c(NA, \"sex\", \"age\")) } } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/show_uniq.html","id":null,"dir":"Reference","previous_headings":"","what":"Print unique values from a data frame column, then keep it moving — show_uniq","title":"Print unique values from a data frame column, then keep it moving — show_uniq","text":"show_uniq gets unique values column position within vector, prints neatly console, returns original data frame unchanged. just convenience showing values column without breaking workflow train thought, useful identifying groups add_grps.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/show_uniq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print unique values from a data frame column, then keep it moving — show_uniq","text":"","code":"show_uniq(data, col)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/show_uniq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print unique values from a data frame column, then keep it moving — show_uniq","text":"data data frame col Bare column name interest","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/show_uniq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print unique values from a data frame column, then keep it moving — show_uniq","text":"Original unchanged data","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/show_uniq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print unique values from a data frame column, then keep it moving — show_uniq","text":"","code":"# show_uniq makes it easy to see that the values of `edu_level` that correspond # to less than high school are in positions 2-16, and so on education |>     dplyr::group_by(name) |>     show_uniq(edu_level) |>     add_grps(         list(             ages25plus = 1,             less_than_high_school = 2:16,             high_school_plus = 17:25,             bachelors_plus = 22:25         ),         group = edu_level, value = estimate     ) #>  #>   1: Total                                     #>   2: No schooling completed                    #>   3: Nursery school                            #>   4: Kindergarten                              #>   5: 1st grade                                 #>   6: 2nd grade                                 #>   7: 3rd grade                                 #>   8: 4th grade                                 #>   9: 5th grade                                 #>  10: 6th grade                                 #>  11: 7th grade                                 #>  12: 8th grade                                 #>  13: 9th grade                                 #>  14: 10th grade                                #>  15: 11th grade                                #>  16: 12th grade, no diploma                    #>  17: Regular high school diploma               #>  18: GED or alternative credential             #>  19: Some college, less than 1 year            #>  20: Some college, 1 or more years, no degree  #>  21: Associate's degree                        #>  22: Bachelor's degree                         #>  23: Master's degree                           #>  24: Professional school degree                #>  25: Doctorate degree                         #>  #> # A tibble: 20 × 3 #> # Groups:   name [5] #>    name       edu_level             estimate #>    <chr>      <fct>                    <dbl> #>  1 Bethany    ages25plus                3725 #>  2 Bethany    less_than_high_school      130 #>  3 Bethany    high_school_plus          3595 #>  4 Bethany    bachelors_plus            2193 #>  5 East Haven ages25plus               20768 #>  6 East Haven less_than_high_school     1724 #>  7 East Haven high_school_plus         19044 #>  8 East Haven bachelors_plus            5201 #>  9 Hamden     ages25plus               41017 #> 10 Hamden     less_than_high_school     2375 #> 11 Hamden     high_school_plus         38642 #> 12 Hamden     bachelors_plus           19132 #> 13 New Haven  ages25plus               84441 #> 14 New Haven  less_than_high_school    11853 #> 15 New Haven  high_school_plus         72588 #> 16 New Haven  bachelors_plus           31866 #> 17 West Haven ages25plus               35813 #> 18 West Haven less_than_high_school     4393 #> 19 West Haven high_school_plus         31420 #> 20 West Haven bachelors_plus           10399"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/table_nums.html","id":null,"dir":"Reference","previous_headings":"","what":"Common ACS table numbers — table_nums","title":"Common ACS table numbers — table_nums","text":"Lists ACS table numbers commonly used DataHaven. basic_table_nums used making short profiles towns, neighborhoods, regions, ext_table_nums used \"extended\" profiles, neighborhood profiles distributed PDF DataHaven website.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/table_nums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common ACS table numbers — table_nums","text":"","code":"basic_table_nums  ext_table_nums"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/table_nums.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common ACS table numbers — table_nums","text":"named list, names correspond abbreviated subjects string values correspond table numbers.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up town names as returned from ACS — town_names","title":"Clean up town names as returned from ACS — town_names","text":"function two things: removes text town name column given name_col, removes rows \"county subdivisions defined.\" example, string \"Ansonia town, New Haven County, Connecticut\" become \"Ansonia.\"","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up town names as returned from ACS — town_names","text":"","code":"town_names(data, name_col)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up town names as returned from ACS — town_names","text":"data data frame name_col Bare column name town names","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up town names as returned from ACS — town_names","text":"tibble/data frame cleaned names \"defined\" towns removed","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up town names as returned from ACS — town_names","text":"","code":"pops <- tibble::tribble(     ~name, ~total_pop,     \"County subdivisions not defined, New Haven County, Connecticut\", 0,     \"Ansonia town, New Haven County, Connecticut\", 18802,     \"Beacon Falls town, New Haven County, Connecticut\", 6168,     \"Bethany town, New Haven County, Connecticut\", 5513,     \"Branford town, New Haven County, Connecticut\", 2802 ) town_names(pops, name_col = name) #> # A tibble: 4 × 2 #>   name         total_pop #>   <chr>            <dbl> #> 1 Ansonia          18802 #> 2 Beacon Falls      6168 #> 3 Bethany           5513 #> 4 Branford          2802"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecticut town shapefile — town_sf","title":"Connecticut town shapefile — town_sf","text":"Data frame Connecticut towns sf geometries.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecticut town shapefile — town_sf","text":"","code":"town_sf"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Connecticut town shapefile — town_sf","text":"Data frame class sf. name Town name GEOID Town GEOID geometry Town geometry sfc_MULTIPOLYGON","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/tract_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecticut tract shapefile — tract_sf","title":"Connecticut tract shapefile — tract_sf","text":"Data frame Connecticut tracts sf geometries. tract_sf19 2019 version, need older shapefile.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/tract_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecticut tract shapefile — tract_sf","text":"","code":"tract_sf  tract_sf19"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/tract_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Connecticut tract shapefile — tract_sf","text":"Data frame class sf. name Tract FIPS code geometry Tract geometry sfc_MULTIPOLYGON object class sf (inherits data.frame) 829 rows 2 columns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":null,"dir":"Reference","previous_headings":"","what":"Village to town lookup — village2town","title":"Village to town lookup — village2town","text":"crosswalk Connecticut's Census-designated places (CDP) towns (county subdivisions) intersecting . 2010 boundaries, places generally within single town, 2020 boundaries increased number places, including ones span multiple towns. table now weights show much place's population associated town. version also includes places, just ones differ corresponding town. Note places span full state. populations 2020 decennial census, overlaps based fitting blocks within places.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Village to town lookup — village2town","text":"","code":"village2town"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Village to town lookup — village2town","text":"data frame 224 rows 7 variables: town Town (county subdivision) name place CDP name place_geoid CDP FIPS code town_pop Population full town place_pop Population full CDP overlap_pop Population overlapping area, interpolated block populations place_wt Share CDP population included town-CDP overlapping area","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Village to town lookup — village2town","text":"Spatial overlay TIGER shapefiles populations 2020 Decennial Census DHC table P1.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"CT crosswalk — xwalk","title":"CT crosswalk — xwalk","text":"crosswalk geographies Connecticut, built TIGER shapefiles. tract2town subset just tracts towns. Tracts span multiple towns deduplicated listed town largest areal overlap. version cwi::xwalk contains tracts town names, deduplicated tracts span multiple towns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CT crosswalk — xwalk","text":"","code":"xwalk  tract2town"},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"for-xwalk-","dir":"Reference","previous_headings":"","what":"For xwalk:","title":"CT crosswalk — xwalk","text":"data frame 48358 rows 17 variables: block Block FIPS code block_grp Block group FIPS code, based county FIPS block_grp_cog Block group FIPS code, based COG FIPS 2022 ACS tract Tract FIPS code, based county FIPS tract_cog Tract FIPS code, based COG FIPS 2022 ACS town Town name town_fips Town FIPS code, based county FIPS town_fips_cog Town FIPS code, based COG FIPS 2022 ACS county County name county_fips County FIPS code cog COG name cog_fips COG FIPS code msa Metro/micropolitan area name msa_fips Metro/micropolitan area FIPS code puma PUMA name puma_fips PUMA FIPS code, based county FIPS puma_fips_cog PUMA FIPS code, based COG FIPS 2022 ACS","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"for-tract-town-","dir":"Reference","previous_headings":"","what":"For tract2town:","title":"CT crosswalk — xwalk","text":"data frame 879 rows 3 variables: tract Tract FIPS code tract_cog Tract FIPS code, based COG FIPS 2022 ACS town Town name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CT crosswalk — xwalk","text":"2020 2022 (COGs & towns) TIGER shapefiles","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip to town lookup — zip2town","title":"Zip to town lookup — zip2town","text":"crosswalk Connecticut's ZCTA5s towns shares populations households overlapping areas. row corresponds combination zip town; therefore, zips one observation, towns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip to town lookup — zip2town","text":"","code":"zip2town"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zip to town lookup — zip2town","text":"data frame 410 rows 8 variables: town Town name zip 5-digit zip code (ZCTA5) inter_pop Population intersection zips towns inter_hh Number households intersection zips towns pct_of_town_pop Percentage town's population also zip pct_of_town_hh Percentage town's households also zip pct_of_zip_pop Percentage zip's population also town pct_of_zip_hh Percentage zip's households also town","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Zip to town lookup — zip2town","text":"Cleaned-version Census 2022 ZCTA county subdivision relationship file, updated Connecticut's 2022 revisions counties COGs.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-2-0-1","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v2.0.1 (2025-08-07)","text":"remove extra dcws utility function","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"feat-2-0-0","dir":"Changelog","previous_headings":"","what":"Feat","title":"cwi v2.0.0 (2025-08-07)","text":"move functions camiller cwi deprecation: remove dcws-related functions deprecated data: add educational attainment dataset examples testing","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-1-13-1","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v1.13.1 (2025-05-20)","text":"proxy_pumas: rename Greater Bridgeport COG Greater Bridgeport (geo, consistent name)","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"feat-1-13-0","dir":"Changelog","previous_headings":"","what":"Feat","title":"cwi v1.13.0 (2025-05-19)","text":"copy calc_shares function camiller package add Greater Bridgeport proxy_pumas","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-1-13-0","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v1.13.0 (2025-05-19)","text":"remove cws_demo dataset","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-1-12-2","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v1.12.2 (2025-03-27)","text":"clean old dependencies & vignettes","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"refactor-1-12-2","dir":"Changelog","previous_headings":"","what":"Refactor","title":"cwi v1.12.2 (2025-03-27)","text":"clean_names: port simplify janitor::clean_names drop dependency","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-1-12-1","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v1.12.1 (2025-03-26)","text":"clean old dependencies & vignettes","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"feat-1-12-0","dir":"Changelog","previous_headings":"","what":"Feat","title":"cwi v1.12.0 (2025-03-26)","text":"first set deprecating functions moving dcws: read_xtabs, read_weights, xtab2df","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-1-12-0","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v1.12.0 (2025-03-26)","text":"second round deprecations: sub_nonanswers collapse_n_wt","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"fix-1-11-1","dir":"Changelog","previous_headings":"","what":"Fix","title":"cwi v1.11.1 (2025-02-26)","text":"qwi_industry: fix handling QWI queries return empty results","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-v1110-2025-02-19","dir":"Changelog","previous_headings":"","what":"cwi v1.11.0 (2025-02-19)","title":"cwi v1.11.0 (2025-02-19)","text":"Added get_cpi function, used hood adj_inflation. Consider adj_inflation higher-level application get_cpi. new function doesn’t change data frame, takes arguments seasonality period, allowing choose whether CPI values month vs annual average, whether seasonally adjusted. adj_inflation makes decisions (annual averages seasonally adjusted) simplicity.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-v1100-2025-01-29","dir":"Changelog","previous_headings":"","what":"cwi v1.10.0 (2025-01-29)","title":"cwi v1.10.0 (2025-01-29)","text":"small flurry behind--scenes updates, including build tools documentation.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-v190-2025-01-29","dir":"Changelog","previous_headings":"","what":"cwi v1.9.0 (2025-01-29)","title":"cwi v1.9.0 (2025-01-29)","text":"add memoized functions keep availability lookups date, close #33 #36","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-180","dir":"Changelog","previous_headings":"","what":"cwi 1.8.0","title":"cwi 1.8.0","text":"Fixed neighborhood shapefiles. now come directly cities’ data portals scratchpad repo, ’re published release, giving us single source truth boundaries . also errors neighborhoods Hartford / West Hartford Stamford received tracts outside city boundaries. result, weights tables changed fair amount. ’d also used combinations Stamford neighborhoods now city, shifts neighborhoods lumped together ’re labeled.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-171","dir":"Changelog","previous_headings":"","what":"cwi 1.7.1","title":"cwi 1.7.1","text":"Updated improved methods making zip2town crosswalk, based 2020 / 2022 geographies. columns included data frame slightly changed. Fixed issues qwi_industry: API now uses COGs Connecticut instead counties.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-170","dir":"Changelog","previous_headings":"","what":"cwi 1.7.0","title":"cwi 1.7.0","text":"Moved add_logo stylehaven package.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-163","dir":"Changelog","previous_headings":"","what":"cwi 1.6.3","title":"cwi 1.6.3","text":"Bumping package versions just draw attention fact ’s now set PUMA proxy crosswalks; see proxy_pumas.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-162","dir":"Changelog","previous_headings":"","what":"cwi 1.6.2","title":"cwi 1.6.2","text":"Edit xwalk—still FIPS codes update COG-based versions. data frame now includes COG-based codes block groups, tracts, towns, PUMAs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-161","dir":"Changelog","previous_headings":"","what":"cwi 1.6.1","title":"cwi 1.6.1","text":"Bump ACS-related defaults 2022","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-160","dir":"Changelog","previous_headings":"","what":"cwi 1.6.0","title":"cwi 1.6.0","text":"MINOR BREAKING CHANGE: update corresponds 2022 ACS data release, first use COGs instead counties. COGs different FIPS codes, town tract FIPS codes (apparently block groups) changed match. bulk code digits stay , portion signifying county changed, e.g. 09009140101 now 09170140101. deal without breaking much code, changes package: Neighborhood lookup tables (bridgeport_tracts, etc) previous county-based FIPS codes column geoid, new COG-based FIPS codes column geoid_cog. xwalk now columns COG-based town tract FIPS codes, addition previous county-based ones. Calling multi_geo_acs counties = \"\" (default) get COGs, multi_geo_decennial get counties, switch retroactive. names COGs returned multi_geo_acs used names regions list ones Census Bureau uses. Unfortunately, aren’t ones state uses. , ’ve added function fix_cogs, replaces common names ones state lists somewhat officially, e.g. Capitol COG census data, Capitol Region COG state usually uses probably always. Finally, part doesn’t come often break: previously multi_geo_* functions took neighborhood names, weights, GEOIDs bare column names, defaults (name, weight, geoid, respectively). now given strings (.e. quotation marks), geoid longer default. deal fact calculations now need neighborhood lookup tables’ geoid columns, need geoid_cog. matters ’re including neighborhoods function calls.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-150","dir":"Changelog","previous_headings":"","what":"cwi 1.5.0","title":"cwi 1.5.0","text":"2020 decennial census added dozen new census designated places, village2town based . now overlap towns even less well used . table recalculated, towns villages joined based overlapping population 2020 decennial, now includes populations weights crosswalk. means things break ’re expecting one set CDPs get another, ’re expecting new columns table.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-140","dir":"Changelog","previous_headings":"","what":"cwi 1.4.0","title":"cwi 1.4.0","text":"MINOR BREAKING CHANGE: multi_geo_decennial now defaults 2020. 2020 decennial uses different summary file code previous years, default sumfile argument, used 2010, lead error. 2020 decennial variables now available decennial_vars20. 2010 ones still decennial_vars10. new data frame, cb_avail, years, programs (ACS vs decennial), dataset codes (SF1, ACS5, DHC, etc.) available Census Bureau’s API. function dh_scaffold poorly named great fit aims project. ’s moved {stylehaven}; find scaffold_project. Minor improvements warnings messages.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-130","dir":"Changelog","previous_headings":"","what":"cwi 1.3.0","title":"cwi 1.3.0","text":"Add COGs xwalk along function reconciling names","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-120","dir":"Changelog","previous_headings":"","what":"cwi 1.2.0","title":"cwi 1.2.0","text":"Update defaults 2021 applicable: multi_geo_acs, adj_inflation base year, label_acs. Replace acs_vars20 acs_vars21. multi_geo_decennial now takes \"pl\" possible value summary file, since full 2020 Decennial data still aren’t .","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-113","dir":"Changelog","previous_headings":"","what":"cwi 1.1.3","title":"cwi 1.1.3","text":"Add regional councils governments regions list. Connecticut adopted 2022 replace counties. Definitions CTOPM . Add vignette regions since ’s many now","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-112","dir":"Changelog","previous_headings":"","what":"cwi 1.1.2","title":"cwi 1.1.2","text":"Start handling updated MSA definitions—sure datasets actually use yet Add rescale option sub_nonanswers—default won’t change existing code","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-111","dir":"Changelog","previous_headings":"","what":"cwi 1.1.1","title":"cwi 1.1.1","text":"Bugfix: occupational codes larger groups smaller groups. One larger group (Healthcare Practitioners Technical Occupations) mislabeled marked Education, Legal, Community Service, Arts, Media Occupations.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-110","dir":"Changelog","previous_headings":"","what":"cwi 1.1.0","title":"cwi 1.1.0","text":"updates 2020 2020 ACS 5-year data finally , acs_vars19 replaced acs_vars20, multi_geo_acs now uses 2020 default. examples & vignette code updated match. Decennial census data aren’t yet won’t time, decennial-related things still default 2010.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-100","dir":"Changelog","previous_headings":"","what":"cwi 1.0.0","title":"cwi 1.0.0","text":"Major exciting overhaul! first time felt like enough package flexible well thought consider real release. lot changes hood–split lot functions slimmed-main “caller” functions multiple task-focused “helper” functions, making easier maintain package, add modify features, use code multiple tasks.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"user-facing-updates-1-0-0","dir":"Changelog","previous_headings":"","what":"User-facing updates","title":"cwi 1.0.0","text":"Moved base messages cli cleaner clearer messaging (printouts fetch functions getting, limitations function calls, etc) Better handling Census API calls better deal often servers busted Metadata: several behind--scenes datasets set limits functions’ API calls now expanded just limited Connecticut–includes qwi_industry laus_trend. Added table occupation codes main occupation groups Better documentation many functions","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"cwi 1.0.0","text":"’ve never liked levels multi_geo_* functions–don’t really remember made plural, ’re now singular. column e.g. “1_state”, “2_counties”, “3_towns” now “1_state”, “2_county”, “3_town”. might break filtering ’ve done level. Renamed one function: acs_quick_map –> quick_map","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"to-do-1-0-0","dir":"Changelog","previous_headings":"","what":"To do","title":"cwi 1.0.0","text":"Update 2020 ACS Decennial defaults","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-045","dir":"Changelog","previous_headings":"","what":"cwi 0.4.5","title":"cwi 0.4.5","text":"Add sleep argument multi_geo_acs dealing API crashes.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-044","dir":"Changelog","previous_headings":"","what":"cwi 0.4.4","title":"cwi 0.4.4","text":"Add handling reading crosstab weights placed headers alongside data rather separate table (e.g. 2021).","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-043","dir":"Changelog","previous_headings":"","what":"cwi 0.4.3","title":"cwi 0.4.3","text":"Import camiller::calc_shares Add sample data ACS: gnh_tenure","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-042","dir":"Changelog","previous_headings":"","what":"cwi 0.4.2","title":"cwi 0.4.2","text":"Since 2020 ACS delayed, decided still copies 2019 geography-related files. temporary, now 2 versions tract shapefile (tract_sf tract_sf19), 2 versions neighborhood-tract weight table (e.g. new_haven_tracts new_haven_tracts19, ). data , ’ll remove 2019 versions bump package version.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-041","dir":"Changelog","previous_headings":"","what":"cwi 0.4.1","title":"cwi 0.4.1","text":"Update tract_sf town_sf 2020 boundaries. Don’t expect anything changed towns, many tracts added Census Bureau released redistricting data. Handle typos crosstabs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-040","dir":"Changelog","previous_headings":"","what":"cwi 0.4.0","title":"cwi 0.4.0","text":"Rewrote neighborhood weights 2020 redistricting block boundaries. Dropped block group table done New Haven, changed name nhv_tracts new_haven_tracts match cities. QWI API working , payroll data missing database.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-031","dir":"Changelog","previous_headings":"","what":"cwi 0.3.1","title":"cwi 0.3.1","text":"Minor behind--scenes updates","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-030","dir":"Changelog","previous_headings":"","what":"cwi 0.3.0","title":"cwi 0.3.0","text":"QWI example basic workflow vignette currently turned , Census QWI API least days now. turn back API (hopefully) back online. New function: Add function separate_acs lazy way split ACS labels.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-020","dir":"Changelog","previous_headings":"","what":"cwi 0.2.0","title":"cwi 0.2.0","text":"Added finished versions read_xtab, read_weights, xtab2df, collapse_n_wt working DataHaven Community Wellbeing Survey crosstabs—see vignettes Added add_logo built-DataHaven logo Bug fixes sub_nonanswers, xwalk","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-012","dir":"Changelog","previous_headings":"","what":"cwi 0.1.2","title":"cwi 0.1.2","text":"multi_geo_acs & multi_geo_decennial call janitor::clean_names returning. keeps columns aligned properly neighborhoods included.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-011","dir":"Changelog","previous_headings":"","what":"cwi 0.1.1","title":"cwi 0.1.1","text":"Expanded xwalk data include geographic levels. Minor vignette cleanup.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-010","dir":"Changelog","previous_headings":"","what":"cwi 0.1.0","title":"cwi 0.1.0","text":"Added NEWS.md file track changes package. Functions make use API keys explicit key arguments Census BLS API keys don’t stored specific environment variables, though ’ll still default environment variables. Installation easier less overhead, now fewer dependencies. Fixed bugs BLS API adj_inflation. multi_geo_acs multi_geo_decennial can aggregate neighborhood data. ’s example workflow vignette. now date newer dplyr 1.0.0 & tidyr 1.0.0 functions. New functions: jenks, dh_scaffold","code":""}]
