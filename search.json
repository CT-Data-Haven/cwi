[{"path":"https://CT-Data-Haven.github.io/cwi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 DataHaven Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"acs-2","dir":"Articles","previous_headings":"","what":"2020 ACS","title":"ACS updates","text":"lot new 2020 ACS.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"new-tables","dir":"Articles","previous_headings":"2019 ACS","what":"New tables","title":"ACS updates","text":"2019 ACS included reengineering tables, new additions. clarifications phrasing questions tables, time leaving home work. substantial changes family structure phrased inclusive -sex unmarried couples–see recent working paper . just quick check ’s new changed.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/acs-updates.html","id":"variables-in-the-tables-related-to-gender-family-structure","dir":"Articles","previous_headings":"2019 ACS","what":"Variables in the tables related to gender & family structure:","title":"ACS updates","text":"named list()","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"fetching-data-from-acs","dir":"Articles","previous_headings":"","what":"Fetching data from ACS","title":"Basic workflow","text":"’m pulling entries cwi dataset cwi::regions (list) include Greater New Haven-area ones. fetch ACS tables regions, towns, New Haven County. Neighborhoods corresponding tracts block groups included 4 cities (see neighborhood_tracts). Pass get neighborhood-level aggregates.","code":"gnh_regions <- regions[c(\"Greater New Haven\", \"New Haven Inner Ring\", \"New Haven Outer Ring\")]  gnh_data <- map(table_nums, multi_geo_acs,   year = yr, towns = regions$`Greater New Haven`,   regions = gnh_regions, counties = \"New Haven\", state = \"09\", sleep = 1 )  gnh_data$total_pop #> # A tibble: 18 × 9 #>     year level    state       county         geoid name  variable estimate   moe #>    <dbl> <fct>    <chr>       <chr>          <chr> <chr> <chr>       <dbl> <dbl> #>  1  2020 1_state  NA          NA             09    Conn… B01003_…  3570549    NA #>  2  2020 2_county Connecticut NA             09009 New … B01003_…   855733    NA #>  3  2020 3_region Connecticut NA             NA    Grea… B01003_…   463099   131 #>  4  2020 3_region Connecticut NA             NA    New … B01003_…   144051    79 #>  5  2020 3_region Connecticut NA             NA    New … B01003_…   188667    96 #>  6  2020 4_town   Connecticut New Haven Cou… 0900… Beth… B01003_…     5492    27 #>  7  2020 4_town   Connecticut New Haven Cou… 0900… Bran… B01003_…    27924    31 #>  8  2020 4_town   Connecticut New Haven Cou… 0900… East… B01003_…    28645    57 #>  9  2020 4_town   Connecticut New Haven Cou… 0900… Guil… B01003_…    22164    26 #> 10  2020 4_town   Connecticut New Haven Cou… 0900… Hamd… B01003_…    60740    38 #> 11  2020 4_town   Connecticut New Haven Cou… 0900… Madi… B01003_…    18065    31 #> 12  2020 4_town   Connecticut New Haven Cou… 0900… Milf… B01003_…    54503    59 #> 13  2020 4_town   Connecticut New Haven Cou… 0900… New … B01003_…   130381    41 #> 14  2020 4_town   Connecticut New Haven Cou… 0900… Nort… B01003_…    14147    22 #> 15  2020 4_town   Connecticut New Haven Cou… 0900… Nort… B01003_…    23665    22 #> 16  2020 4_town   Connecticut New Haven Cou… 0900… Oran… B01003_…    13928    27 #> 17  2020 4_town   Connecticut New Haven Cou… 0900… West… B01003_…    54666    39 #> 18  2020 4_town   Connecticut New Haven Cou… 0900… Wood… B01003_…     8779    27 multi_geo_acs(\"B01003\",   towns = \"New Haven\", counties = \"New Haven\",   neighborhoods = new_haven_tracts,   nhood_geoid = \"geoid\",   year = yr ) #>  #> ── Table B01003: TOTAL POPULATION, 2020 ──────────────────────────────────────── #> • Neighborhoods: 19 neighborhoods #> • Towns: New Haven #> • Counties: New Haven County #> • State: 09 #> ℹ Assuming that neighborhood GEOIDs are for tracts. #> # A tibble: 22 × 9 #>     year level          state       county   geoid name  variable estimate   moe #>    <dbl> <fct>          <chr>       <chr>    <chr> <chr> <chr>       <dbl> <dbl> #>  1  2020 1_state        NA          NA       09    Conn… B01003_…  3570549    NA #>  2  2020 2_county       Connecticut NA       09009 New … B01003_…   855733    NA #>  3  2020 3_town         Connecticut New Hav… 0900… New … B01003_…   130381    41 #>  4  2020 4_neighborhood Connecticut New Hav… NA    Amity B01003_…     5052   741 #>  5  2020 4_neighborhood Connecticut New Hav… NA    Annex B01003_…     7042  1054 #>  6  2020 4_neighborhood Connecticut New Hav… NA    Beav… B01003_…     5624  1186 #>  7  2020 4_neighborhood Connecticut New Hav… NA    Dixw… B01003_…     7108  1102 #>  8  2020 4_neighborhood Connecticut New Hav… NA    Down… B01003_…     5517  1031 #>  9  2020 4_neighborhood Connecticut New Hav… NA    Dwig… B01003_…     6382  1029 #> 10  2020 4_neighborhood Connecticut New Hav… NA    East… B01003_…     9643  1759 #> # ℹ 12 more rows"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"aggregating-and-analyzing-data","dir":"Articles","previous_headings":"","what":"Aggregating and analyzing data","title":"Basic workflow","text":"total population data straightforward, one variable, B01003_001. tibble returned GEOID, except custom geographies like regions; name geography, including names region; variable codes; estimates; margins error default 90% confidence level; geographic level, numbered order decreasing size; counties towns. race ethnicity table require calculations, using brilliantly-titled camiller package: Using label_acs(), join race tibble cwi::acs_vars dataset get variable labels. Oftentimes, labels need separated \"!!\" delimeter. Group geographic level, county, name. Call camiller::add_grps() list racial groups labels’ positions label column. gives estimates , optionally, margins error aggregates camiller::calc_shares() gives shares group’s estimate \"total\" denominator. tenure table, ’s easiest separate labels \"!!\". table can wrangled shares households owner-occupied.","code":"gnh_data$race |>   label_acs(year = yr) |>   group_by(level, county, name) |>   add_grps(list(total = 1, white = 3, black = 4, latino = 12, other = 5:9), group = label) |>   calc_shares(group = label, denom = \"total\") #> # A tibble: 90 × 6 #> # Groups:   level, county, name [18] #>    level    county name             label  estimate  share #>    <fct>    <chr>  <chr>            <fct>     <dbl>  <dbl> #>  1 1_state  NA     Connecticut      total   3570549 NA     #>  2 1_state  NA     Connecticut      white   2357942  0.66  #>  3 1_state  NA     Connecticut      black    352036  0.099 #>  4 1_state  NA     Connecticut      latino   587212  0.164 #>  5 1_state  NA     Connecticut      other    273359  0.077 #>  6 2_county NA     New Haven County total    855733 NA     #>  7 2_county NA     New Haven County white    529955  0.619 #>  8 2_county NA     New Haven County black    107033  0.125 #>  9 2_county NA     New Haven County latino   159144  0.186 #> 10 2_county NA     New Haven County other     59601  0.07  #> # ℹ 80 more rows homeownership <- gnh_data$tenure |>   label_acs(year = yr) |>   separate(label, into = c(\"total\", \"tenure\"), sep = \"!!\", fill = \"left\") |>   select(level, name, tenure, estimate) |>   group_by(level, name) |>   calc_shares(group = tenure, denom = \"Total\") |>   filter(tenure == \"Owner occupied\")  homeownership #> # A tibble: 18 × 5 #> # Groups:   level, name [18] #>    level    name                 tenure         estimate share #>    <fct>    <chr>                <fct>             <dbl> <dbl> #>  1 1_state  Connecticut          Owner occupied   915408 0.661 #>  2 2_county New Haven County     Owner occupied   206810 0.621 #>  3 3_region Greater New Haven    Owner occupied   105204 0.596 #>  4 3_region New Haven Inner Ring Owner occupied    32158 0.612 #>  5 3_region New Haven Outer Ring Owner occupied    59331 0.793 #>  6 4_town   Bethany              Owner occupied     1705 0.917 #>  7 4_town   Branford             Owner occupied     8317 0.655 #>  8 4_town   East Haven           Owner occupied     7913 0.742 #>  9 4_town   Guilford             Owner occupied     7298 0.86  #> 10 4_town   Hamden               Owner occupied    14105 0.637 #> 11 4_town   Madison              Owner occupied     5853 0.862 #> 12 4_town   Milford              Owner occupied    16662 0.745 #> 13 4_town   New Haven            Owner occupied    13715 0.28  #> 14 4_town   North Branford       Owner occupied     4777 0.86  #> 15 4_town   North Haven          Owner occupied     7561 0.826 #> 16 4_town   Orange               Owner occupied     4537 0.905 #> 17 4_town   West Haven           Owner occupied    10140 0.514 #> 18 4_town   Woodbridge           Owner occupied     2621 0.893"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"visual-sketches","dir":"Articles","previous_headings":"","what":"Visual sketches","title":"Basic workflow","text":"geo_level_plot() gives quick visual overview homeownership rates, highlighting town-level values.  acs_quick_map() gives quick map sketch rates. function uses Jenks algorithm making breaks jenks(). algorithm well suited visually displaying larger inequalities, number breaks give won’t necessarily number breaks returned.function lets us see whether ’s geographic distribution data minimal work.  Since returns ggplot object sf data, can add additional ggplot functions, labeling, themes, additional scales geoms.","code":"homeownership |>   geo_level_plot(value = share, hilite = \"darkslateblue\", type = \"point\") tenure_map <- homeownership |>   filter(level == \"4_town\") |>   quick_map(     value = share, level = \"town\", color = \"black\", linewidth = 0.4,     title = \"Homeownership, Greater New Haven\", palette = \"BuPu\"   )  tenure_map tenure_map +   labs(subtitle = stringr::str_glue(\"By town, {yr}\")) +   geom_sf(data = . %>% filter(name == \"New Haven\"), fill = NA, color = \"black\", linewidth = 1.5)"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"batch-output","dir":"Articles","previous_headings":"","what":"Batch output","title":"Basic workflow","text":"Say part pipeline, need calculations, write different sections data frame CSV files pass along colleague refer later, continue calculations. batch_csv_dump() takes either list data frames data frame plus column split , writes set CSV files, lets move along next step pipeline. example, need pull table populations age group several regions Connecticut. don’t need split populations gender, ’ll add male female populations age group. don’t actually need detailed age groups now, need stash files later, ’ll aggregate, write bunch files, aggregate broader age groups need current work.","code":"new_haven_regions <- regions[c(   \"Greater New Haven\", \"New Haven Inner Ring\",   \"New Haven Outer Ring\", \"Lower Naugatuck Valley\",   \"Greater Waterbury\" )]  age <- multi_geo_acs(   table = \"B01001\", year = yr, towns = NULL,   regions = new_haven_regions,   counties = c(\"New Haven County\", \"Fairfield County\") ) |>   label_acs(year = yr) |>   # shortcut around tidyr::separate   separate_acs(into = c(\"sex\", \"age\"), drop_total = TRUE) |>   filter(!is.na(age)) |>   mutate(age = forcats::as_factor(age)) |>   group_by(name, level, age) |>   summarise(estimate = sum(estimate)) |>   ungroup()  age |>   split(~name) |>   batch_csv_dump(base_name = \"pop_by_age\", bind = TRUE, verbose = TRUE) |>   group_by(level, name) |>   camiller::add_grps(list(ages00_04 = 1, ages05_17 = 2:4, ages00_17 = 1:4),     group = age, value = estimate   ) |>   arrange(level, name, age)"},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"quarterly-workforce-indicators","dir":"Articles","previous_headings":"Employment trends","what":"Quarterly Workforce Indicators","title":"Basic workflow","text":"’m also interested learning employment industry past several years. qwi_industry() fetches county-level data industry time, either quarterly annually. ’ll look annual averages industries South Central COG Connecticut past 16 years. ’m filtering industry code “00”, counts industries. Next, say want look industries largest South Central COG 2018, see changed COG statewide time period. ’ll filter employment, get industries largest numbers employees, filter employment just industries plot .  Update 11/2021: QWI API broken little . ’s , payroll data missing. code still valid ever gets returned. ’m interested changes wages period, can use adj_inflation() function. takes data frame, name column containing dollar amounts, base year, adds two columns inflation adjustment factor adjusted value. Now visual shows industries, wages climbed past several years, many industries, wages haven’t increased except inflation.","code":"scc_employment <- qwi_industry(2002:2018, counties = \"170\", annual = TRUE) |>   mutate(location = \"South Central COG\") #> ℹ Note that starting with the 2022 release, ACS data uses COGs instead of #>   counties. #> ℹ The API can only get 10 years of data at once; making multiple calls, but this might take a little longer. #>  #> This message is displayed once per session. ct_employment <- qwi_industry(2002:2018, annual = T) |>   mutate(location = \"Connecticut\") #> ℹ The API can only get 10 years of data at once; making multiple calls, but this might take a little longer. employment <- bind_rows(scc_employment, ct_employment) |>   filter(industry != \"00\") |>   inner_join(naics_codes |> select(-ind_level), by = \"industry\")  employment #> # A tibble: 680 × 8 #>     year state county industry     emp payroll location          label           #>    <dbl> <chr> <chr>  <chr>      <dbl>   <dbl> <chr>             <chr>           #>  1  2002 09    170    11         377        NA South Central COG Agriculture, F… #>  2  2002 09    170    21          31.2      NA South Central COG Mining, Quarry… #>  3  2002 09    170    22        1100        NA South Central COG Utilities       #>  4  2002 09    170    23       11282        NA South Central COG Construction    #>  5  2002 09    170    31-33    33484.       NA South Central COG Manufacturing   #>  6  2002 09    170    42       11279.       NA South Central COG Wholesale Trade #>  7  2002 09    170    44-45    32909        NA South Central COG Retail Trade    #>  8  2002 09    170    48-49     5804.       NA South Central COG Transportation… #>  9  2002 09    170    51       11863.       NA South Central COG Information     #> 10  2002 09    170    52       10706        NA South Central COG Finance and In… #> # ℹ 670 more rows top2018 <- employment |>   filter(year == 2018, county == \"170\") |>   top_n(8, emp) |>   pull(industry) top2018 #> [1] \"31-33\" \"44-45\" \"54\"    \"56\"    \"61\"    \"62\"    \"72\"    \"81\"  employment |>   filter(industry %in% top2018) |>   mutate(label = stringr::str_sub(label, 1, 25)) |>   mutate(Emp_1k = emp / 1000) |>   ggplot(aes(x = year, y = Emp_1k, color = label)) +   geom_line() +   labs(     x = \"Year\", y = \"Employees (thousands)\", title = \"Employment by industry\",     subtitle = \"Connecticut and South Central COG, 2002-2018\", color = \"Industry\"   ) +   theme_minimal() +   facet_wrap(vars(location), scales = \"free_y\") employment |>   filter(industry %in% top2018) |>   mutate(label = stringr::str_sub(label, 1, 25)) |>   mutate(avg_wage = Payroll / Emp) |>   adj_inflation(value = avg_wage, base_year = 2018, year = year) |>   mutate(adj_wage_1k = round(adj_avg_wage / 1000)) |>   ggplot(aes(x = year, y = adj_wage_1k, color = label)) +   geom_line() +   scale_y_continuous(labels = scales::dollar) +   labs(     x = \"Year\", y = \"Average annual wages (thousands)\",     title = \"Average annual wages by industry (adjusted to 2018 dollars)\",     subtitle = \"Connecticut and New Haven County, 2002-2018\", color = \"Industry\"   ) +   theme_minimal() +   facet_wrap(vars(location), scales = \"free_y\")"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/cwi.html","id":"local-area-unemployment-statistics","dir":"Articles","previous_headings":"Employment trends","what":"Local Area Unemployment Statistics","title":"Basic workflow","text":"look unemployment rates time, can use laus_trend(). LAUS covers smaller geographies QWI, laus_trend() set find data combination state, counties, towns. LAUS API returns monthly data labor force counts, employment counts, unemployed counts, unemployment rate; laus_trend() lets specify measures fetch.","code":"unemployment <- laus_trend(c(\"New Haven\", \"New Haven County\", \"Connecticut\"),   startyear = 2000, endyear = 2018, measures = \"unemployment rate\" ) |>   mutate(unemployment_rate = unemployment_rate / 100) |>   select(area, date, value = unemployment_rate) #>  #> ── Local Area Unemployment Statistics ────────────────────────────────────────── #> • Unemployment Rate #> • Not Seasonally Adjusted  unemployment #> # A tibble: 684 × 3 #>    area             date       value #>    <chr>            <date>     <dbl> #>  1 Connecticut      2000-01-01 0.027 #>  2 New Haven County 2000-01-01 0.029 #>  3 New Haven        2000-01-01 0.036 #>  4 Connecticut      2000-02-01 0.027 #>  5 New Haven County 2000-02-01 0.029 #>  6 New Haven        2000-02-01 0.035 #>  7 Connecticut      2000-03-01 0.024 #>  8 New Haven County 2000-03-01 0.025 #>  9 New Haven        2000-03-01 0.033 #> 10 Connecticut      2000-04-01 0.018 #> # ℹ 674 more rows  unemp_plot <- ggplot(unemployment, aes(x = date, y = value, group = area, color = area)) +   geom_line() +   geom_smooth(se = FALSE, method = \"loess\", linewidth = 0.8) unemp_plot #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/shapefiles.html","id":"sf","dir":"Articles","previous_headings":"","what":"sf","title":"Shapefiles","text":"sf objects easy plot either box sf::plot.sf(), ggplot2::ggplot() ggplot2 version 3.0.0. Use ggplot() means geom_sf() can overlayed basemap ggmap, done neighborhood examples. sf well-documented, uses dplyr-type functions allow mutating, filtering, summarizing, joining, data wrangling functions. See sf vignettes help getting started: vignette(package = \"sf\"). sf data frames look act like data frames, shape information attached.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/articles/shapefiles.html","id":"statewide","dir":"Articles","previous_headings":"","what":"Statewide","title":"Shapefiles","text":"basic plot cwi::town_sf, ggplot aesthetics set, graticule lines turned coord_sf(ndiscr = F), blank theme.  dplyr operations. example, group_by() followed summarise() conducts union group’s geometries, using sf::st_union() back-end.  cwi::tract_sf, fairly large shape containing tracts state, 2020 redistricting.","code":"ggplot(town_sf) +     geom_sf(fill = \"gray70\", color = \"white\", linewidth = 0.5) +     ggtitle(\"Connecticut towns\") town_sf |>     filter(name %in% regions[[\"Greater New Haven\"]]) |>     group_by(area = ifelse(name == \"New Haven\", \"New Haven\", \"New Haven suburbs\")) |>     summarise() |>     ggplot() +     geom_sf(aes(fill = area), color = \"white\") +     scale_fill_manual(values = c(\"New Haven\" = \"mediumorchid\", \"New Haven suburbs\" = \"gray70\")) +     theme(legend.position = \"bottom\") +     ggtitle(\"Filtering and unioning shapes\") #> although coordinates are longitude/latitude, st_union assumes that they are #> planar ggplot(tract_sf) +     geom_sf(fill = \"gray70\", color = \"white\", linewidth = 0.1) +     ggtitle(\"Connecticut tracts\")"},{"path":"https://CT-Data-Haven.github.io/cwi/articles/shapefiles.html","id":"neighborhoods","dir":"Articles","previous_headings":"","what":"Neighborhoods","title":"Shapefiles","text":"Neighborhood shapes made DataHaven splitting grouping census tracts neighborhood areas defined city’s government. cases, boundaries slightly adjusted fit tracts. Small neighborhoods may grouped together analysis. See documentation cwi::neighborhood_shapes crosswalk tracts neighborhoods cwi::neighborhood_tracts.","code":"list(     \"New Haven\" = new_haven_sf, Stamford = stamford_sf,     \"Hartford/West Hartford\" = hartford_sf, Bridgeport = bridgeport_sf ) |>     purrr::iwalk(function(shp, title) {         p <- ggplot(shp) +             geom_sf(color = \"mediumorchid3\", fill = \"orchid3\", alpha = 0.1) +             geom_sf_text(aes(label = name), size = 2)         print(p)     })"},{"path":"https://CT-Data-Haven.github.io/cwi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Seaberry. Author, maintainer.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaberry C (2025). cwi: Prep DataHaven's Community Wellbeing Index. R package version 1.8.0, https://CT-Data-Haven.github.io/cwi, https://github.com/CT-Data-Haven/cwi.","code":"@Manual{,   title = {cwi: Prep for DataHaven's Community Wellbeing Index},   author = {Camille Seaberry},   year = {2025},   note = {R package version 1.8.0,     https://CT-Data-Haven.github.io/cwi},   url = {https://github.com/CT-Data-Haven/cwi}, }"},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"cwi-","dir":"","previous_headings":"","what":"Prep for DataHaven's Community Wellbeing Index","title":"Prep for DataHaven's Community Wellbeing Index","text":"original goal cwi get data, primarily Census ACS, fetched, aggregated, analyzed DataHaven’s 2019 Community Index reports. ’s now evolved support day--day work—now ’re 2022 reports! includes functions speed standardize analysis multiple staff people, preview trends patterns ’ll need write , get data layperson-friendly formats. pairs well many functions Camille’s brilliantly-named camiller package.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prep for DataHaven's Community Wellbeing Index","text":"can install package GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"CT-Data-Haven/cwi\")"},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Prep for DataHaven's Community Wellbeing Index","text":"package relies heavily : tidyverse packages, namely dplyr, tidyr, purrr, stringr, forcats, ggplot2 (version >= 3.0.0) (lot tidyverse) rlang tidyselect non-standard evaluation many functions tidycensus actually getting Census data sf isn’t required ’s encouraged","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Prep for DataHaven's Community Wellbeing Index","text":"cwi ships several datasets shapefiles. include: Shapes (sf objects) towns, tracts, city neighborhoods New Haven, Hartford, Bridgeport, Stamford Common ACS table numbers—hopefully decreases time spent prowling around Census Bureau site Definitions neighborhoods tract block group, regions town","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"sources","dir":"","previous_headings":"","what":"Sources","title":"Prep for DataHaven's Community Wellbeing Index","text":"package contains functions make easier reproducible fetch analyze data : American Community Survey (US Census Bureau) Decennial Census (US Census Bureau) Quarterly Workforce Indicators (US Census Bureau Center Economic Studies) Local Area Unemployment Statistics (Bureau Labor Statistics) DataHaven’s Community Wellbeing Survey","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Prep for DataHaven's Community Wellbeing Index","text":"’s example getting big table calculate homeownership rates across many geographies :  See detail vignette: vignette(\"cwi\").","code":"library(dplyr) library(cwi) tenure <- multi_geo_acs(   table = basic_table_nums$tenure,   year = 2020,   regions = regions[c(\"Greater New Haven\", \"New Haven Inner Ring\", \"New Haven Outer Ring\")],   counties = \"New Haven\",   towns = regions[[\"Greater New Haven\"]],   us = TRUE ) #>  #> ── Table B25003: TENURE, 2020 ────────────────────────────────────────────────── #> • Towns: Bethany, Branford, East Haven, Guilford, Hamden, Madison, Milford, New #> Haven, North Branford, North Haven, Orange, West Haven, Woodbridge #> • Regions: Greater New Haven, New Haven Inner Ring, New Haven Outer Ring #> • Counties: New Haven County #> • State: 09 #> • US: Yes tenure #> # A tibble: 57 × 9 #>     year level    state       county geoid name         variable estimate    moe #>    <dbl> <fct>    <chr>       <chr>  <chr> <chr>        <chr>       <dbl>  <dbl> #>  1  2020 1_us     <NA>        <NA>   1     United Stat… B25003_…   1.22e8 211970 #>  2  2020 1_us     <NA>        <NA>   1     United Stat… B25003_…   7.88e7 342600 #>  3  2020 1_us     <NA>        <NA>   1     United Stat… B25003_…   4.36e7 134985 #>  4  2020 2_state  <NA>        <NA>   09    Connecticut  B25003_…   1.39e6   3268 #>  5  2020 2_state  <NA>        <NA>   09    Connecticut  B25003_…   9.15e5   5015 #>  6  2020 2_state  <NA>        <NA>   09    Connecticut  B25003_…   4.70e5   4548 #>  7  2020 3_county Connecticut <NA>   09009 New Haven C… B25003_…   3.33e5   1647 #>  8  2020 3_county Connecticut <NA>   09009 New Haven C… B25003_…   2.07e5   2123 #>  9  2020 3_county Connecticut <NA>   09009 New Haven C… B25003_…   1.26e5   2225 #> 10  2020 4_region Connecticut <NA>   <NA>  Greater New… B25003_…   1.76e5   1834 #> # ℹ 47 more rows homeownership <- tenure |>   label_acs(year = 2020) |>   dplyr::group_by(level, name) |>   camiller::calc_shares(group = label, denom = \"Total\") |>   dplyr::filter(stringr::str_detect(label, \"Owner\")) |>   dplyr::select(level, name, share)  homeownership #> # A tibble: 19 × 3 #> # Groups:   level, name [19] #>    level    name                 share #>    <fct>    <chr>                <dbl> #>  1 1_us     United States        0.644 #>  2 2_state  Connecticut          0.661 #>  3 3_county New Haven County     0.621 #>  4 4_region Greater New Haven    0.596 #>  5 4_region New Haven Inner Ring 0.612 #>  6 4_region New Haven Outer Ring 0.793 #>  7 5_town   Bethany              0.917 #>  8 5_town   Branford             0.655 #>  9 5_town   East Haven           0.742 #> 10 5_town   Guilford             0.86  #> 11 5_town   Hamden               0.637 #> 12 5_town   Madison              0.862 #> 13 5_town   Milford              0.745 #> 14 5_town   New Haven            0.28  #> 15 5_town   North Branford       0.86  #> 16 5_town   North Haven          0.826 #> 17 5_town   Orange               0.905 #> 18 5_town   West Haven           0.514 #> 19 5_town   Woodbridge           0.893 geo_level_plot(homeownership, value = share, hilite = \"#EA7FA2\",                 title = \"Homeownership in Greater New Haven, 2020\")"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable labels from the 2023 ACS — acs_vars","title":"Variable labels from the 2023 ACS — acs_vars","text":"Dataset ACS variable labels, loaded tidycensus::load_variables() 2023 cleaned slightly.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable labels from the 2023 ACS — acs_vars","text":"","code":"acs_vars"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Variable labels from the 2023 ACS — acs_vars","text":"data frame 28261 rows 3 variables: name Variable code, first 6 characters table number last 3 digits variable number label Readable label variable concept Table name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Variable labels from the 2023 ACS — acs_vars","text":"US Census Bureau via tidycensus","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable labels from the 2023 ACS — acs_vars","text":"dataset updated annual ACS release, attribute year giving ACS endyear dataset.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/acs_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable labels from the 2023 ACS — acs_vars","text":"","code":"# get the year attr(acs_vars, \"year\") #> [1] 2023"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/adj_inflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add inflation-adjusted values to a data frame — adj_inflation","title":"Add inflation-adjusted values to a data frame — adj_inflation","text":"modeled blscrapeR::inflation_adjust joins data frame inflation adjustment table Bureau Labor Statistics' Consumer Price Index, calculates adjusted values. returns original data frame two additional columns adjustment factors adjustment values.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/adj_inflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add inflation-adjusted values to a data frame — adj_inflation","text":"","code":"adj_inflation(   data,   value,   year,   base_year = endyears[[\"acs\"]],   verbose = TRUE,   key = NULL )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/adj_inflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add inflation-adjusted values to a data frame — adj_inflation","text":"data data frame containing monetary values year. value Bare column name monetary values; safety, default. year Bare column name years; safety, default. base_year Year base inflation amounts. Defaults 2023, corresponds saying \"... adjusted 2023 dollars.\" verbose Logical: TRUE (default), print overview information series used, returned API. key string giving BLS API key. NULL (default), take value Sys.getenv(\"BLS_KEY\").","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/adj_inflation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add inflation-adjusted values to a data frame — adj_inflation","text":"data frame two additional columns: adjustment factors, adjusted values. adjusted values column named based name supplied value; e.g. value = avg_wage, adjusted column named adj_avg_wage.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/adj_inflation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add inflation-adjusted values to a data frame — adj_inflation","text":"Note: adj_inflation makes API calls, internet access required. According BLS research page, series uses best suited data going back 2000, methodology changed. previous years, accurate version index available site.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/adj_inflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add inflation-adjusted values to a data frame — adj_inflation","text":"","code":"if (FALSE) { # \\dontrun{ wages <- data.frame(     fiscal_year = 2010:2016,     wage = c(50000, 51000, 52000, 53000, 54000, 55000, 54000) ) adj_inflation(wages, value = wage, year = fiscal_year, base_year = 2016) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"function takes either list data frames, data frame column split , writes CSV files. returns list data frames, optionally row-binded back together. fits neatly middle longer piped workflow.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"","code":"batch_csv_dump(   data,   split_by,   path = \".\",   base_name = NULL,   bind = FALSE,   verbose = TRUE,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"data data frame list data frames split_by Bare column name variable split . data list, unnecessary ignored. path String giving path save files; defaults current working directory. base_name Optional string prepended file names. bind Logical: whether row-bind list data frames single data frame. Defaults FALSE, case list data frames returned. verbose Logical: whether print files' paths names written. Defaults TRUE. ... Additional arguments pass utils::write.csv, na col.names.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/batch_csv_dump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a list of data frames to CSV and keep it movin' — batch_csv_dump","text":"Either list data frames (case bind = FALSE) single data frame (case bind = TRUE).","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cb_avail.html","id":null,"dir":"Reference","previous_headings":"","what":"Tables available from the Census Bureau API — cb_avail","title":"Tables available from the Census Bureau API — cb_avail","text":"Dataset tables available Census Bureau's API, filtered include just mainland decennial summary files ACS detailed tables. Useful verifying summary files available different years, codes changed (3-year ACS sunset, decennial summary files now demographic & housing characteristics tables). Also used internally checking calls multi_geo_acs multi_geo_decennial.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cb_avail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tables available from the Census Bureau API — cb_avail","text":"","code":"cb_avail"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cb_avail.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tables available from the Census Bureau API — cb_avail","text":"data frame 52 rows 4 variables: vintage Vintage year dataset program Program, either \"acs\" \"dec\" survey Survey/summary file title Brief title, standardized","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cb_avail.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tables available from the Census Bureau API — cb_avail","text":"US Census Bureau API Discovery Tool","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/collapse_n_wt.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse survey groups and get weighted means — collapse_n_wt","title":"Collapse survey groups and get weighted means — collapse_n_wt","text":"just quick wrapper common, tedious task collapsing several demographic groups, income brackets, larger groups taking weighted mean based set survey weights.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/collapse_n_wt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse survey groups and get weighted means — collapse_n_wt","text":"","code":"collapse_n_wt(   data,   ...,   .lvls,   .group = group,   .value = value,   .weight = weight,   .fill_wts = FALSE,   .digits = NULL )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/collapse_n_wt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse survey groups and get weighted means — collapse_n_wt","text":"data data frame, returned xtab2df() joined survey weights returned read_weights(). default column names match returned xtab2df (group, value) read_weights (weight). ... Bare column names use grouping, including .group column, location, year, category, response, etc–probably everything except values weights. .lvls named list, values character vectors smaller groups (e.g. c(\"<$15K\", \"$15K-$30K\")) names groups replaced (e.g. \"<$30K\"). split arguments forcats::fct_collapse(). .group Bare column name groups found. Default: group .value Bare column name values found. Default: value .weight Bare column name group weights found. Default: weight .fill_wts Logical: TRUE, missing weights filled 1, .e. unweighted. defaults FALSE, missing weights useful way find mismatch group labels data weights table, often case. Therefore, set TRUE already accounted labeling discrepancies. .digits Numeric: given, weighted means rounded number digits. NULL (default), values returned unrounded.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/collapse_n_wt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse survey groups and get weighted means — collapse_n_wt","text":"data frame summarized values. .group column collapsed groups, .value column average values.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/collapse_n_wt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse survey groups and get weighted means — collapse_n_wt","text":"","code":"# collapse income groups, such that <$15K, $15K-$30K become <$30K, etc income_lvls <- list(     \"<$30K\" = c(\"<$15K\", \"$15K-$30K\"),     \"$30K-$100K\" = c(\"$30K-$50K\", \"$50K-$75K\", \"$75K-$100K\"),     \"$100K+\" = c(\"$100K-$200K\", \"$200K+\") ) cws_demo |>     dplyr::filter(category %in% c(\"Greater New Haven\", \"Income\")) |>     collapse_n_wt(code:response, .lvls = income_lvls, .digits = 2) #> # A tibble: 16 × 6 #>    code  question                                  category group response value #>    <chr> <chr>                                     <fct>    <fct> <fct>    <dbl> #>  1 Q1    Are you satisfied with the city or area … Greater… Grea… Yes       0.82 #>  2 Q1    Are you satisfied with the city or area … Greater… Grea… No        0.17 #>  3 Q1    Are you satisfied with the city or area … Greater… Grea… Don't k…  0.01 #>  4 Q1    Are you satisfied with the city or area … Greater… Grea… Refused   0    #>  5 Q1    Are you satisfied with the city or area … Income   <$30K Yes       0.77 #>  6 Q1    Are you satisfied with the city or area … Income   <$30K No        0.22 #>  7 Q1    Are you satisfied with the city or area … Income   <$30K Don't k…  0.01 #>  8 Q1    Are you satisfied with the city or area … Income   <$30K Refused   0    #>  9 Q1    Are you satisfied with the city or area … Income   $30K… Yes       0.83 #> 10 Q1    Are you satisfied with the city or area … Income   $30K… No        0.15 #> 11 Q1    Are you satisfied with the city or area … Income   $30K… Don't k…  0.01 #> 12 Q1    Are you satisfied with the city or area … Income   $30K… Refused   0    #> 13 Q1    Are you satisfied with the city or area … Income   $100… Yes       0.85 #> 14 Q1    Are you satisfied with the city or area … Income   $100… No        0.14 #> 15 Q1    Are you satisfied with the city or area … Income   $100… Don't k…  0.01 #> 16 Q1    Are you satisfied with the city or area … Income   $100… Refused   0"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Five Connecticuts clusters — ct5_clusters","title":"Five Connecticuts clusters — ct5_clusters","text":"Cluster assignments towns \"5 Connecticuts\"–urban core, urban periphery, suburban, rural, wealthy–based median family income, poverty rate, population density.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Five Connecticuts clusters — ct5_clusters","text":"","code":"ct5_clusters"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Five Connecticuts clusters — ct5_clusters","text":"data frame 169 rows 2 variables: town Town name cluster Cluster label","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/ct5_clusters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Five Connecticuts clusters — ct5_clusters","text":"Levy, Don: Five Connecticuts 2010 Update. (2015). Produced Siena College Research Institute DataHaven based original 1990 2000 designations \"Levy, Don, Orlando Rodriguez, Wayne Villemez. 2004. Changing Demographics Connecticut - 1990 2000. Part 2: Five Connecticuts. Storrs, Connecticut: University Connecticut, Connecticut State Data Center, Series, . OP 2004-01.\"","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cwi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cwi: Prep for DataHaven's Community Wellbeing Index — cwi-package","title":"cwi: Prep for DataHaven's Community Wellbeing Index — cwi-package","text":"collection functions collecting analyzing Census data sources write 2019 Community Wellbeing Index reports. also contains reference tables local geographies—neighborhoods, regions, etc—commonly used ACS table numbers.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cwi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cwi: Prep for DataHaven's Community Wellbeing Index — cwi-package","text":"Maintainer: Camille Seaberry camille@ctdatahaven.org","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cws_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"CWS demo data — cws_demo","title":"CWS demo data — cws_demo","text":"sample 2015 DataHaven Community Wellbeing Survey data Greater New Haven weights attached, saved use examples.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cws_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CWS demo data — cws_demo","text":"","code":"cws_demo"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/cws_demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CWS demo data — cws_demo","text":"data frame 100 rows 7 variables: code Question code question Question text category Category: gender, age, etc. group Group: male, female, ages 18–34, etc. response Survey response value Percentage value weight Survey weight","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable labels from the Decennial Census — decennial_vars","title":"Variable labels from the Decennial Census — decennial_vars","text":"Dataset Decennial Census variable labels, loaded tidycensus::load_variables() cleaned slightly. 2010 2020 versions saved separately different variable code formats. decennial_vars attribute year giving year dataset.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable labels from the Decennial Census — decennial_vars","text":"","code":"decennial_vars  decennial_vars10"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Variable labels from the Decennial Census — decennial_vars","text":"data frame 8959 rows (2010) 9067 rows (2020) 3 variables: name Variable code containing table number variable number label Readable label variable concept Table name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Variable labels from the Decennial Census — decennial_vars","text":"US Census Bureau via tidycensus","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/decennial_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable labels from the Decennial Census — decennial_vars","text":"","code":"# get the year attr(decennial_vars, \"year\") #> [1] 2020"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix names of COGs — fix_cogs","title":"Fix names of COGs — fix_cogs","text":"Connecticut rolls use COGs place counties, names COGs might differ depending ask (Census Bureau, CTOPM, COGs ). crosswalk cwi::xwalk uses names come Census; function renames match COGs' apparent preferences.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix names of COGs — fix_cogs","text":"","code":"fix_cogs(x)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix names of COGs — fix_cogs","text":"x vector names, either character factor.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix names of COGs — fix_cogs","text":"vector length type input","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/fix_cogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix names of COGs — fix_cogs","text":"","code":"fix_cogs(names(regions[1:6])) #> [1] \"6 wealthiest Fairfield County\" \"Capitol Region COG\"            #> [3] \"Eastern cities\"                \"Fairfield County\"              #> [5] \"Connecticut Metro COG\"         \"Connecticut Metro COG\""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly make a ggplot to view data by geographic level — geo_level_plot","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"quick way make bar chart, Cleveland dotplot, histogram set data, filled geographic level.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"","code":"geo_level_plot(   data,   name = name,   value = value,   level = level,   type = c(\"col\", \"hist\", \"point\"),   hilite = \"dodgerblue\",   title = NULL,   dark_gray = \"gray20\",   light_gray = \"gray60\",   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"data data frame use plotting. name Bare column name containing names, .e. independent variable. value Bare column name containing values, .e. dependent variable. level Bare column name containing geographic levels fill. type String: one \"col\" (bar chart), \"point\" (dot plot), \"hist\" (histogram); defaults \"col\". hilite String giving highlight color, used lowest geography present. title String giving title, desired, plot. dark_gray String giving named gray color highest geography; defaults \"gray20\". light_gray String giving named gray color second lowest geography; defaults \"gray60\". ... additional parameters pass underlying geom function.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/geo_level_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly make a ggplot to view data by geographic level — geo_level_plot","text":"ggplot","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/gnh_tenure.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS demo data - tenure — gnh_tenure","title":"ACS demo data - tenure — gnh_tenure","text":"table housing tenure data Greater New Haven obtained multi_geo_acs, used testing examples.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/gnh_tenure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS demo data - tenure — gnh_tenure","text":"","code":"gnh_tenure"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/gnh_tenure.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACS demo data - tenure — gnh_tenure","text":"data frame 45 rows 5 variables: level Geographic level name Geography name tenure Tenure: total households, owner-occupied, renter-occupied estimate Estimated count share Calculated share households, NA total","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"Given numeric vector, returns factor values cut n number breaks using Jenks/Fisher algorithms. algorithm(s) sets breaks way highlights high low values well. good use choropleths need convey imbalances inequities.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"","code":"jenks(x, n = 5, true_jenks = FALSE, labels = NULL, ...)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"x numeric vector cut n Number bins, Default: 5 true_jenks Logical: \"true\" Jenks algorithm used? false, uses faster Fisher-Jenks algorithm. See classInt::classIntervals docs discussion. Default: FALSE labels string vector used bin labels, Default: NULL ... Additional arguments passed base::cut","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"factor length x","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/jenks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly cut a vector with the Jenks/Fisher algorithms — jenks","text":"","code":"set.seed(123) values <- rexp(30, 0.8) jenks(values, n = 4) #>  [1] (0.535,1.36]   (0.535,1.36]   (1.36,2.71]    [0.0364,0.535] [0.0364,0.535] #>  [6] [0.0364,0.535] [0.0364,0.535] [0.0364,0.535] (2.71,5.05]    [0.0364,0.535] #> [11] (0.535,1.36]   (0.535,1.36]   [0.0364,0.535] [0.0364,0.535] [0.0364,0.535] #> [16] (0.535,1.36]   (1.36,2.71]    (0.535,1.36]   (0.535,1.36]   (2.71,5.05]    #> [21] (0.535,1.36]   (0.535,1.36]   (1.36,2.71]    (1.36,2.71]    (1.36,2.71]    #> [26] (1.36,2.71]    (1.36,2.71]    (1.36,2.71]    [0.0364,0.535] (0.535,1.36]   #> Levels: [0.0364,0.535] (0.535,1.36] (1.36,2.71] (2.71,5.05]"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly add the labels of ACS variables — label_acs","title":"Quickly add the labels of ACS variables — label_acs","text":"tidycensus::get_acs returns ACS table variable codes, can joined cwi::acs_vars* get readable labels. function just quick wrapper around common task joining two data frames.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly add the labels of ACS variables — label_acs","text":"","code":"label_acs(data, year = 2023, survey = \"acs5\", variable = variable)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly add the labels of ACS variables — label_acs","text":"data data frame/tibble. year endyear ACS data; defaults 2023. survey string: ACS estimate use. Defaults 5-year (\"acs5\"), can also 1-year (\"acs1\") 3-year (\"acs3\"), though 1-year 3-year limited availability. variable bare column name variable codes; defaults variable, returned tidycensus::get_acs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly add the labels of ACS variables — label_acs","text":"tibble","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_decennial.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly add the labels of decennial variables — label_decennial","title":"Quickly add the labels of decennial variables — label_decennial","text":"tidycensus::get_decennial returns decennial data table variable codes, can joined cwi::decennial_vars20 get readable labels. function just quick wrapper around common task joining two data frames.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_decennial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly add the labels of decennial variables — label_decennial","text":"","code":"label_decennial(data, year = 2020, sumfile = \"dhc\", variable = variable)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_decennial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly add the labels of decennial variables — label_decennial","text":"data data frame/tibble. year year decennial census data; defaults 2020. sumfile string: summary file use. Defaults \"dhc\", code used 2020. 2010 used summary files labeled \"sf1\" \"sf3\". variable bare column name variable codes; defaults variable, returned tidycensus::get_decennial.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/label_decennial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly add the labels of decennial variables — label_decennial","text":"tibble","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"LAUS area codes — laus_codes","title":"LAUS area codes — laus_codes","text":"dataset area types codes states, counties, towns across US, used Local Area Unemployment Statistics. needed put together series names, like used make API calls qwi_industry. used filtered just Connecticut.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LAUS area codes — laus_codes","text":"","code":"laus_codes"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LAUS area codes — laus_codes","text":"data frame 6644 rows 4 variables: type Area type code state_code Two-digit state FIPS code area Area name area_code Area code","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"LAUS area codes — laus_codes","text":"filtered cleaned version file downloaded BLS.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"Fetch monthly LAUS data list locations given time period, modeled blscrapeR::bls_api. Requires BLS API key.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"","code":"laus_trend(   names = NULL,   startyear,   endyear,   state = \"09\",   measures = \"all\",   annual = FALSE,   verbose = TRUE,   key = NULL )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"names character vector place names look , either towns /counties. startyear Numeric; first year range endyear Numeric; last year range state string: either name two-digit FIPS code US state. Required; defaults \"09\" (Connecticut). measures character vector measures, containing combination \"unemployment rate\", \"unemployment\", \"employment\", \"labor force\", \"\" (default) shorthand . annual Logical: whether include annual averages along monthly data. Defaults FALSE. verbose Logical: TRUE (default), print overview information series used, returned API. key string giving BLS API key. NULL (default), take value Sys.getenv(\"BLS_KEY\").","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"data frame, slightly cleaned API returns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/laus_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch local area unemployment statistics (LAUS) data over time — laus_trend","text":"","code":"if (FALSE) { # \\dontrun{ laus_trend(c(\"Connecticut\", \"New Haven\", \"Hamden\"), 2014, 2017, annual = TRUE) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":null,"dir":"Reference","previous_headings":"","what":"Names and GEOIDs of regional MSAs — msa","title":"Names and GEOIDs of regional MSAs — msa","text":"reference dataset metropolitan statistical areas (MSAs) US, marked whether New England state.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names and GEOIDs of regional MSAs — msa","text":"","code":"msa"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names and GEOIDs of regional MSAs — msa","text":"data frame 392 rows 3 variables: geoid GEOID/FIPS code name Name MSA region String: whether MSA inside outside New England","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/msa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Names and GEOIDs of regional MSAs — msa","text":"US Census Bureau via tidycensus. Note 2020.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch an ACS table with multiple geography levels — multi_geo_acs","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"Fetch data table ACS via tidycensus choice geographies multiple levels. geographies made aggregates, .e. neighborhoods made tracts regions made towns, returned table estimates summed margins error calculated whole area. geographic levels null excluded.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"","code":"multi_geo_acs(   table,   year = endyears[[\"acs\"]],   towns = \"all\",   regions = NULL,   counties = \"all\",   state = \"09\",   neighborhoods = NULL,   tracts = NULL,   blockgroups = NULL,   pumas = NULL,   msa = FALSE,   us = FALSE,   new_england = TRUE,   nhood_name = \"name\",   nhood_geoid = NULL,   nhood_weight = \"weight\",   survey = c(\"acs5\", \"acs1\"),   verbose = TRUE,   key = NULL,   sleep = 0,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"table string giving ACS table number. year year ACS table; currently defaults 2023 (recent available). towns character vector names towns include; \"\" (default) towns optionally filtered county; NULL fetch town-level table. regions named list regions town names (defaults NULL). counties character vector names counties include; \"\" (default) counties state; NULL fetch county-level table. state string: either name two-digit FIPS code US state. Required; defaults \"09\" (Connecticut). neighborhoods data frame columns neighborhood name, GEOID either tracts block groups, weight, e.g. share tract assigned neighborhood. included, weighted sums MOEs returned neighborhoods. Try match formatting built-neighborhood tables. tracts character vector 11-digit FIPS codes tracts include, \"\" tracts optionally filtered county. Defaults NULL. blockgroups character vector 12-digit FIPS codes block groups include, \"\" block groups optionally filtered county. Defaults NULL. pumas character vector 7-digit FIPS codes public use microdata areas (PUMAs) include, \"\" PUMAs optionally filtered county. filter redundancies–large towns standalone PUMAs, sparsely-population counties. Defaults NULL. msa Logical: whether fetch New England states' metropolitan statistical areas. Defaults FALSE. us Logical: whether fetch US-level table. Defaults FALSE. new_england Logical: TRUE (default), limits metro areas just New England states. nhood_name String giving name column data frame neighborhoods contains neighborhood names. Previously bare column name, consistency changes COG-based FIPS codes, needs string. relevant neighborhood weight table used. Defaults \"name\" match neighborhood lookup datasets. nhood_geoid String giving name column neighborhoods contains neighborhood GEOIDs, either tracts block groups. relevant neighborhood weight table used. changes FIPS codes, longer default. nhood_weight String giving name column neighborhoods contains weights neighborhood names tract/block groups. relevant neighborhood weight table used. Defaults \"weight\" match neighborhood lookup datasets. survey string: ACS estimate use. Defaults 5-year (\"acs5\"), can also 1-year (\"acs1\"). verbose Logical: whether print summary geographies included. Defaults TRUE. key String: Census API key. NULL (default), takes value Sys.getenv(\"CENSUS_API_KEY\"). sleep Number seconds, , sleep API call. might help Census API's tendency crash, many geographies, add sizable time. Probably add seconds. ... Additional arguments pass tidycensus::get_acs","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"tibble GEOID, name, variable code, estimate, moe, geography level, state, year, applicable, chosen ACS table.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"function essentially calls tidycensus::get_acs() multiple times, depending geographic levels chosen, minor cleaning, filtering, aggregation. Note underlying tidycensus::get_acs() requires Census API key. case tidycensus functions, multi_geo_acs assumes key stored CENSUS_API_KEY .Renviron. See tidycensus::census_api_key() installation.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch an ACS table with multiple geography levels — multi_geo_acs","text":"","code":"if (FALSE) { # \\dontrun{ multi_geo_acs(\"B01003\", 2019,     towns = \"all\",     regions = list(inner_ring = c(\"Hamden\", \"East Haven\", \"West Haven\")),     counties = \"New Haven County\",     tracts = unique(new_haven_tracts$geoid) )  multi_geo_acs(\"B01003\", 2018,     towns = \"Bridgeport\",     counties = \"Fairfield County\",     neighborhoods = bridgeport_tracts ) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"Fetch data table decennial census via tidycensus choice geographies multiple levels. geographies made aggregates, .e. neighborhoods made tracts regions made towns, returned table estimates summed whole area. geographic levels null excluded.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"","code":"multi_geo_decennial(   table,   year = endyears[[\"decennial\"]],   towns = \"all\",   regions = NULL,   counties = \"all\",   state = \"09\",   neighborhoods = NULL,   tracts = NULL,   blockgroups = NULL,   msa = FALSE,   us = FALSE,   new_england = TRUE,   nhood_name = \"name\",   nhood_geoid = NULL,   nhood_weight = \"weight\",   sumfile = c(\"dhc\", \"sf1\", \"sf3\", \"pl\"),   verbose = TRUE,   key = NULL,   sleep = 0,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"table string giving decennial census table number. generally formatted one letters, 3 numbers, optionally letter. year year census table; currently defaults 2020. towns character vector towns include; \"\" (default) towns optionally filtered county; NULL fetch town-level table. regions named list regions town names (defaults NULL). counties character vector counties include; \"\" (default) counties state; NULL fetch county-level table. state string: either name two-digit FIPS code US state. Required; defaults \"09\" (Connecticut). neighborhoods data frame columns neighborhood name, GEOID tracts, weight, e.g. share tract assigned neighborhood. included, weighted sums returned neighborhoods. Unlike multi_geo_acs, take block groups. tracts character vector 11-digit FIPS codes tracts include, \"\" tracts optionally filtered county. Defaults NULL. blockgroups character vector 12-digit FIPS codes block groups include, \"\" block groups optionally filtered county. Defaults NULL. msa Logical: whether fetch New England states' metropolitan statistical areas. Defaults FALSE. us Logical: whether fetch US-level table. Defaults FALSE. new_england Logical: TRUE (default), limits metro areas just New England states. nhood_name String giving name column data frame neighborhoods contains neighborhood names. Previously bare column name, consistency changes COG-based FIPS codes, needs string. relevant neighborhood weight table used. Defaults \"name\" match neighborhood lookup datasets. nhood_geoid String giving name column neighborhoods contains neighborhood GEOIDs, either tracts block groups. relevant neighborhood weight table used. changes FIPS codes, longer default. nhood_weight String giving name column neighborhoods contains weights neighborhood names tract/block groups. relevant neighborhood weight table used. Defaults \"weight\" match neighborhood lookup datasets. sumfile string giving summary file pull . Note codes changed 2010 2020. Now default year 2020, default sumfile \"dhc\". 2010, either \"sf1\", less commonly \"sf3\". Use \"pl\" 2020 redistricting data. verbose Logical: whether print summary geographies included. Defaults TRUE. key String: Census API key. NULL (default), takes value Sys.getenv(\"CENSUS_API_KEY\"). sleep Number seconds, , sleep API call. might help Census API's tendency crash, many geographies, add sizable time. Probably add seconds. ... Additional arguments pass tidycensus::get_acs","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"tibble GEOID, name, variable code, estimate, moe, geography level, state, year, applicable, chosen table.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"function essentially calls tidycensus::get_decennial() multiple times, depending geographic levels chosen, minor cleaning, filtering, aggregation. Note underlying tidycensus::get_decennial() requires Census API key. case tidycensus functions, multi_geo_decennial assumes key stored CENSUS_API_KEY .Renviron. See tidycensus::census_api_key() installation. advised decennial table numbers may change year year, looking trends, check FactFinder another source make sure tables meaning. Setting verbose = TRUE helpful well.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/multi_geo_decennial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch a decennial census table with multiple geography levels — multi_geo_decennial","text":"","code":"if (FALSE) { # \\dontrun{ multi_geo_decennial(\"P1\", 2020,     sumfile = \"dhc\",     towns = \"all\",     regions = list(inner_ring = c(\"Hamden\", \"East Haven\", \"West Haven\")),     counties = \"New Haven County\" ) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS industry codes — naics_codes","title":"NAICS industry codes — naics_codes","text":"dataset industry names NAICS codes. main sectors, detailed industry codes.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS industry codes — naics_codes","text":"","code":"naics_codes"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NAICS industry codes — naics_codes","text":"data frame 21 rows 3 variables: industry NAICS code label Industry name ind_level Sector level: either \"\" industries, \"2\" sectors","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/naics_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NAICS industry codes — naics_codes","text":"just filtered version file downloaded LEHD","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"Data frames neighborhoods Connecticut cities sf geometries. Includes Bridgeport, Hartford/West Hartford, New Haven, Stamford.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"","code":"bridgeport_sf  hartford_sf  new_haven_sf  stamford_sf"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"Data frames (classes data.frame sf). , name name neighborhood, geometry shape neighborhood either sfc_POLYGON sfc_MULTIPOLYGON object. hartford_sf contains additional variable, town, marks neighborhoods Hartford West Hartford. object class sf (inherits data.frame) 13 rows 2 columns. object class sf (inherits data.frame) 27 rows 3 columns. object class sf (inherits data.frame) 20 rows 2 columns. object class sf (inherits data.frame) 13 rows 2 columns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_shapes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Neighborhood shapefiles of Connecticut cities — neighborhood_shapes","text":"neighborhood boundaries, exception West Hartford, come directly respective cities' online data portals. West Hartford neighborhood boundaries based directly current tracts; common names corresponding tracts scraped third-party real estate site.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":null,"dir":"Reference","previous_headings":"","what":"City neighborhoods by tract — neighborhood_tracts","title":"City neighborhoods by tract — neighborhood_tracts","text":"Datasets neighborhoods New Haven, Hartford/West Hartford, Stamford, Bridgeport. tracts cross one neighborhood; use weight column aggregating values populations. Previously included block group version New Haven, removed; also renaming nhv_tracts new_haven_tracts consistency.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"City neighborhoods by tract — neighborhood_tracts","text":"","code":"new_haven_tracts  bridgeport_tracts  stamford_tracts  hartford_tracts  new_haven_tracts19  bridgeport_tracts19  stamford_tracts19  hartford_tracts19"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"City neighborhoods by tract — neighborhood_tracts","text":"data frame; number rows depends city. town hartford_tracts, name town, Hartford West Hartford neighborhoods included; otherwise, town variable needed name Neighborhood name geoid 11-digit FIPS code tract tract 6-digit FIPS code tract; geoid missing state & county components. weight Share tract's households neighborhood","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/neighborhood_tracts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"City neighborhoods by tract — neighborhood_tracts","text":"updated 2020 tract definitions. still 2019 versions weight tables names ending \"19\"; time , stick around use pre-2020 data. Note also error tables Stamford Hartford/West Hartford neighborhoods given extra tracts outside town boundaries. particularly affect counts, population totals neighborhood, based poor alignment spatial overlays. Fixed 5/22/2024.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Census occupation codes — occ_codes","title":"Census occupation codes — occ_codes","text":"dataset occupation groups descriptions Census (OCC) codes SOC codes. Occupations grouped hierarchically. filtered Census crosswalk include top-level groups, except broad management, business, science, arts occupations group; one, second level groups treated major one. Often just want major groups, can filter is_major_grp column.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Census occupation codes — occ_codes","text":"","code":"occ_codes"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Census occupation codes — occ_codes","text":"data frame 32 rows 5 columns: is_major_grp Logical: whether highest level included occ_group Major occupation group name occ_code Census occupation code soc_code SOC code description Full text occupation name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/occ_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Census occupation codes — occ_codes","text":"US Census Bureau's industry & occupation downloads","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":null,"dir":"Reference","previous_headings":"","what":"Proxy PUMAs — proxy_pumas","title":"Proxy PUMAs — proxy_pumas","text":"list 2 data frames giving PUMAs make reasonable approximations designated regions, weights apply population- household-based measures. data frame labeled county uses county-based PUMAs 2021 ACS values; data frame cog uses new COG-based PUMAs 2022 ACS values. working PUMS data weighted surveys, multiply weights proxy table weights survey account much PUMA overlaps region. county-based table includes just non-county regions (e.g. Greater New Haven), COG-based table also includes \"legacy\" counties (e.g. New Haven County), since assume even data released counties, organizations might still want estimates based geographies. See maps proxies weights : https://ct-data-haven.github.io/cogs/proxy-geos.html NOTE: PUMAs included one region. joining tables survey data, make sure allowing duplicates PUMAs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proxy PUMAs — proxy_pumas","text":"","code":"proxy_pumas"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Proxy PUMAs — proxy_pumas","text":"list 2 data frames, county cog, 19 54 rows, respectively, 6 variables: puma 7-digit PUMA FIPS code region Region name pop Total population overlapping area region PUMA hh Total households overlapping area region PUMA pop_weight Population weight: share PUMA's population included region, used population-based survey analysis hh_weight Household weight: share PUMA's households included region, used household-based survey analysis","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Proxy PUMAs — proxy_pumas","text":"2021 & 2022 5-year ACS","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/proxy_pumas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proxy PUMAs — proxy_pumas","text":"","code":"if (FALSE) { # \\dontrun{ # proxies made from county-based PUMAs, use for pre-2022 ACS or other datasets proxy_pumas$county  # proxies made from COG-based PUMAs proxy_pumas$cog } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly create a choropleth sketch — quick_map","title":"Quickly create a choropleth sketch — quick_map","text":"quick way create choropleth sketch town-, neighborhood-, tract-level data. Uses corresponding sf object; June 2018, sf object must one ships package, otherwise globally available.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly create a choropleth sketch — quick_map","text":"","code":"quick_map(   data,   name = name,   value = value,   level = c(\"town\", \"neighborhood\", \"tract\"),   city = NULL,   n = 5,   palette = \"GnBu\",   title = NULL,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly create a choropleth sketch — quick_map","text":"data data frame containing data geography. name Bare column name location names join; defaults name. value Bare column name numeric values map; defaults value. level String giving desired geographic level; must one \"town\", \"neighborhood\", \"tract\". Defaults \"town\". city geographic level neighborhood, string corresponding city name match spatial object. n Number breaks bin values; defaults (approximately) 5. palette String ColorBrewer palette; see RColorBrewer::RColorBrewer() possible values. Defaults \"GnBu\". title String giving title, desired, plot. ... parameters pass along geom_sf(), color size.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly create a choropleth sketch — quick_map","text":"ggplot","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/quick_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly create a choropleth sketch — quick_map","text":"","code":"if (FALSE) { # \\dontrun{ tidycensus::get_acs(     geography = \"county subdivision\",     variables = c(median_age = \"B01002_001\"), state = \"09\", county = \"009\" ) |>     town_names(NAME) |>     dplyr::filter(NAME %in% regions$`Greater New Haven`) |>     quick_map(name = NAME, value = estimate, title = \"Median age by town, 2017\", n = 6) } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":null,"dir":"Reference","previous_headings":"","what":"Get employment counts and total payroll over time — qwi_industry","title":"Get employment counts and total payroll over time — qwi_industry","text":"gets data Quarterly Workforce Indicators (QWI) via Census API. alternative censusapi fetches set variables (employees payroll) makes somewhat dynamic API call. API returns maximum 10 years data; calling function 10 years require multiple API calls, takes little longer.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get employment counts and total payroll over time — qwi_industry","text":"","code":"qwi_industry(   years,   industries = cwi::naics_codes[[\"industry\"]],   state = \"09\",   counties = NULL,   annual = FALSE,   key = NULL,   retry = 5 )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get employment counts and total payroll over time — qwi_industry","text":"years numeric vector one years get data industries character vector NAICS industry codes; default 20 sectors plus \"industries\" dataset naics_codes. state string length 1 representing state's FIPS code, name, two-letter abbreviation; defaults \"09\" Connecticut counties character vector county FIPS codes, \"\" counties. NULL (default), return data just state level. Connecticut, now need COGs; data changed retroactively. annual Logical, whether return annual averages quarterly data (default) . key Census API key. NULL, defaults environmental variable \"CENSUS_API_KEY\", set tidycensus::census_api_key(). retry number times retry API call(s), since server comes can bit finicky.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get employment counts and total payroll over time — qwi_industry","text":"data frame / tibble","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get employment counts and total payroll over time — qwi_industry","text":"Note looking data quarterly, payroll reported quarter, yearly payroll may accustomed . November 2021, payroll data seems missing database; even QWI Explorer app just turns empty.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/qwi_industry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get employment counts and total payroll over time — qwi_industry","text":"","code":"if (FALSE) { # \\dontrun{ qwi_industry(2012:2017, industries = c(\"23\", \"62\"), counties = \"009\") } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/read_xtabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read crosstab data and weights — read_xtabs","title":"Read crosstab data and weights — read_xtabs","text":"two functions facilitate reading Excel spreadsheets crosstabs generated SPSS. Note likely useful working DataHaven Community Wellbeing Survey.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/read_xtabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read crosstab data and weights — read_xtabs","text":"","code":"read_xtabs(   path,   name_prefix = \"x\",   marker = \"Nature of the [Ss]ample\",   year = NULL,   process = FALSE,   verbose = TRUE,   ... )  read_weights(path, year, marker = \"Nature of the [Ss]ample\")"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/read_xtabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read crosstab data and weights — read_xtabs","text":"path Path excel file name_prefix String used create column names x1, x2, x3, ..., Default: 'x' marker String/regex pattern used demarcate crosstabs weight table. NULL, assumed file contains crosstab data weights, filtering done. marker never found, assumed weights headers data, 2021, case different operation done weights table returned. Default: \"Nature [Ss]ample\" year Numeric: year survey (end year, case pooled data). tells functions read files, since formatting changed across years survey. ability read file depends much year produced, argument longer defaults specific year. Instead, NULL (default), guessed path. Supplying explicitly better, serves fallback. process Logical: FALSE (default), return crosstab data processed, likely passing along xtab2df. TRUE, xtab2df called, receive nice, clean data frame ready analysis. recommended already know sure crosstab data looks like, accidentally lose questions important description. sanity check, see message listing parameters used xtab2df call. verbose Logical: process true, parameters passed xtab2df printed? Defaults TRUE encourage double check passing arguments intentionally. ... Additional arguments passed xtab2df process = TRUE.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/read_xtabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read crosstab data and weights — read_xtabs","text":"data frame. read_xtabs, one column per demographic/geographic group included, plus one questions & answers. read_weights, 2 columns, one demographic groups one associated weights.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/read_xtabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read crosstab data and weights — read_xtabs","text":"","code":"if (interactive()) {     xt <- system.file(\"extdata/test_xtab2018.xlsx\", package = \"cwi\")     read_weights(xt, year = 2018)      # returns a not-very-pretty data frame of the crosstabs to be processed     read_xtabs(xt, year = 2018)     # returns a pretty data frame ready for analysis     read_xtabs(xt, year = 2018, process = TRUE) }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions of Connecticut — regions","title":"Regions of Connecticut — regions","text":"dataset Connecticut regions town","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions of Connecticut — regions","text":"","code":"regions"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regions of Connecticut — regions","text":"named list vectors, names give names regions vectors give names towns making region, including regional councils governments.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/regions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regions of Connecticut — regions","text":"DataHaven internal CT OPM","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"School districts by town — school_dists","title":"School districts by town — school_dists","text":"crosswalk Connecticut towns school districts, including regional districts. small towns operate schools included , whereas towns part regional district operate schools, commonly elementary.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"School districts by town — school_dists","text":"","code":"school_dists"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"School districts by town — school_dists","text":"data frame 196 rows 2 variables: district School district name town Name town included district","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"School districts by town — school_dists","text":"Distinct town-level district names come state's data.world. Regional districts towns come combing school district websites.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/school_dists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"School districts by town — school_dists","text":"Note aggregating region, Hartford-area regional district CREC included , spans many towns also run schools.CREC significant enough size generally included Greater Hartford aggregations district comparisons alongside e.g. Hartford West Hartford.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate labels given to ACS data — separate_acs","title":"Separate labels given to ACS data — separate_acs","text":"quick wrapper around tidyr::separate written match standard formatting used ACS variable labels. generally take form e.g. \"Total!!Male!!5 9 years\". function separate values \"!!\" optionally drop resulting \"Total\" column, generally constant entire data frame.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate labels given to ACS data — separate_acs","text":"","code":"separate_acs(   data,   col = label,   into = NULL,   sep = \"!!\",   drop_total = FALSE,   ... )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate labels given to ACS data — separate_acs","text":"data data frame returned cwi::multi_geo_acs tidycensus::get_acs. col Bare column name ACS labels . Default: label Character vector names new variables. NULL (default), names assigned \"x1\", \"x2,\" etc. want include Total column, character vector needs include groups Total (see examples). sep Character: separator columns. Default: '!!' drop_total Logical, whether include \"Total\" column comes separating ACS data. Default: FALSE ... additional arguments passed tidyr::separate.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate labels given to ACS data — separate_acs","text":"data frame","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/separate_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate labels given to ACS data — separate_acs","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) {     age <- label_acs(multi_geo_acs(\"B01001\"))      # Default: allow automatic labeling, in this case x1, x2, x3     separate_acs(age)      # Drop Total column, use automatic labeling (x1 & x2)     separate_acs(age, drop_total = TRUE)      # Keep Total column; assign names total, sex, age     separate_acs(age, into = c(\"total\", \"sex\", \"age\"))      # Drop Total column; only need to name sex & age     separate_acs(age, into = c(\"sex\", \"age\"), drop_total = TRUE)      # Carried over from tidyr::separate, using NA in place of the Total column     # will also drop that column and yield the same as the previous example     separate_acs(age, into = c(NA, \"sex\", \"age\")) } } # }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/sub_nonanswers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove non-answers and rescale percentage values — sub_nonanswers","title":"Remove non-answers and rescale percentage values — sub_nonanswers","text":"convenience function removing might considered non-answers (\"know\", \"refused\", etc.) rescaling remaining values add 1.0.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/sub_nonanswers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove non-answers and rescale percentage values — sub_nonanswers","text":"","code":"sub_nonanswers(   data,   response = response,   value = value,   nons = c(\"Don't know\", \"Refused\"),   factor_response = TRUE,   rescale = FALSE )"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/sub_nonanswers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove non-answers and rescale percentage values — sub_nonanswers","text":"data data frame response Bare column name responses found, including considered non-answers. Default: response value Bare column name values, Default: value nons Character vector responses removed. Default: c(\"know\", \"Refused\") factor_response Logical: TRUE (default), returns response variable factor. likely useful way handle response categories non-answers removed. rescale Logical: TRUE, values scaled based total. FALSE (default), values scaled based assumption responses add 1. cases, crosstabs heavy rounding might add 1 , rescaling helps handle .","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/sub_nonanswers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove non-answers and rescale percentage values — sub_nonanswers","text":"data frame number columns original, fewer rows","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/sub_nonanswers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove non-answers and rescale percentage values — sub_nonanswers","text":"","code":"if (interactive()) {     xt <- system.file(\"extdata/test_xtab2018.xlsx\", package = \"cwi\")     df <- read_xtabs(xt, process = TRUE) |>         dplyr::filter(code == \"Q1\") |>         sub_nonanswers() }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/table_nums.html","id":null,"dir":"Reference","previous_headings":"","what":"Common ACS table numbers — table_nums","title":"Common ACS table numbers — table_nums","text":"Lists ACS table numbers commonly used DataHaven. basic_table_nums used making short profiles towns, neighborhoods, regions, ext_table_nums used \"extended\" profiles, neighborhood profiles distributed PDF DataHaven website.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/table_nums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common ACS table numbers — table_nums","text":"","code":"basic_table_nums  ext_table_nums"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/table_nums.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common ACS table numbers — table_nums","text":"named list, names correspond abbreviated subjects string values correspond table numbers.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up town names as returned from ACS — town_names","title":"Clean up town names as returned from ACS — town_names","text":"function two things: removes text town name column given name_col, removes rows \"county subdivisions defined.\" example, string \"Ansonia town, New Haven County, Connecticut\" become \"Ansonia.\"","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up town names as returned from ACS — town_names","text":"","code":"town_names(data, name_col)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up town names as returned from ACS — town_names","text":"data data frame name_col Bare column name town names","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up town names as returned from ACS — town_names","text":"tibble/data frame cleaned names \"defined\" towns removed","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up town names as returned from ACS — town_names","text":"","code":"pops <- tibble::tribble(     ~name, ~total_pop,     \"County subdivisions not defined, New Haven County, Connecticut\", 0,     \"Ansonia town, New Haven County, Connecticut\", 18802,     \"Beacon Falls town, New Haven County, Connecticut\", 6168,     \"Bethany town, New Haven County, Connecticut\", 5513,     \"Branford town, New Haven County, Connecticut\", 2802 ) town_names(pops, name_col = name) #> # A tibble: 4 × 2 #>   name         total_pop #>   <chr>            <dbl> #> 1 Ansonia          18802 #> 2 Beacon Falls      6168 #> 3 Bethany           5513 #> 4 Branford          2802"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecticut town shapefile — town_sf","title":"Connecticut town shapefile — town_sf","text":"Data frame Connecticut towns sf geometries.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecticut town shapefile — town_sf","text":"","code":"town_sf"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/town_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Connecticut town shapefile — town_sf","text":"Data frame class sf. name Town name GEOID Town GEOID geometry Town geometry sfc_MULTIPOLYGON","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/tract_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecticut tract shapefile — tract_sf","title":"Connecticut tract shapefile — tract_sf","text":"Data frame Connecticut tracts sf geometries. tract_sf19 2019 version, need older shapefile.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/tract_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecticut tract shapefile — tract_sf","text":"","code":"tract_sf  tract_sf19"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/tract_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Connecticut tract shapefile — tract_sf","text":"Data frame class sf. name Tract FIPS code geometry Tract geometry sfc_MULTIPOLYGON object class sf (inherits data.frame) 829 rows 2 columns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":null,"dir":"Reference","previous_headings":"","what":"Village to town lookup — village2town","title":"Village to town lookup — village2town","text":"crosswalk Connecticut's Census-designated places (CDP) towns (county subdivisions) intersecting . 2010 boundaries, places generally within single town, 2020 boundaries increased number places, including ones span multiple towns. table now weights show much place's population associated town. version also includes places, just ones differ corresponding town. Note places span full state. populations 2020 decennial census, overlaps based fitting blocks within places.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Village to town lookup — village2town","text":"","code":"village2town"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Village to town lookup — village2town","text":"data frame 224 rows 7 variables: town Town (county subdivision) name place CDP name place_geoid CDP FIPS code town_pop Population full town place_pop Population full CDP overlap_pop Population overlapping area, interpolated block populations place_wt Share CDP population included town-CDP overlapping area","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/village2town.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Village to town lookup — village2town","text":"Spatial overlay TIGER shapefiles populations 2020 Decennial Census DHC table P1.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xtab2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"Like read_xtab & read_weights, bespoke function make easier extract data DataHaven Community Wellbeing Survey. Applications crosstabs probably limited unless formatting largely . reading crosstab excel file, xtab2df extracts question codes (e.g. Q4A), question text, categories, demographic groups, joins descriptions survey responses values, making ready analysis. hood 2 versions function: one crosstabs generated SPSS (pre-2024 DCWS), one crosstabs generated DataHaven starting 2024. -house crosstabs categories included headings excel, function add .","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xtab2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"","code":"xtab2df(data, year, col = x1, code_pattern = NULL)"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xtab2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"data data frame returned read_xtab. year Numeric: year survey (end year, case pooled data). tells functions read files, since formatting changed across years survey. ability read file depends much year produced, argument longer default; instead must supplied explicitly. col bare column name find question codes text. Default: x1, based names assigned read_xtab code_pattern String: regex pattern denoting find cells contain question code, \"Q10\", \"Q4B\", \"ASTHMA\", split codes question text within cell. pretty finicky, probably want change . NULL (default), function fill \"^[-Z\\\\d_]{2,20}$\" years 2024, \"^[-Z\\\\d_]+(?=\\\\. )\" 2024 onward.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xtab2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"data frame following columns: code (questions codes crosstabs) q_number (questions codes crosstabs, assigned order occur) question category (e.g. age, gender) group (e.g. 18–34, male) response value","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xtab2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"","code":"if (interactive()) {     xt <- system.file(\"extdata/test_xtab2018.xlsx\", package = \"cwi\")     xtab <- read_xtabs(xt, year = 2018)     xtab2df(xtab, year = 2018) }"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"CT crosswalk — xwalk","title":"CT crosswalk — xwalk","text":"crosswalk geographies Connecticut, built TIGER shapefiles. tract2town subset just tracts towns. Tracts span multiple towns deduplicated listed town largest areal overlap. version cwi::xwalk contains tracts town names, deduplicated tracts span multiple towns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CT crosswalk — xwalk","text":"","code":"xwalk  tract2town"},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"for-xwalk-","dir":"Reference","previous_headings":"","what":"For xwalk:","title":"CT crosswalk — xwalk","text":"data frame 48358 rows 17 variables: block Block FIPS code block_grp Block group FIPS code, based county FIPS block_grp_cog Block group FIPS code, based COG FIPS 2022 ACS tract Tract FIPS code, based county FIPS tract_cog Tract FIPS code, based COG FIPS 2022 ACS town Town name town_fips Town FIPS code, based county FIPS town_fips_cog Town FIPS code, based COG FIPS 2022 ACS county County name county_fips County FIPS code cog COG name cog_fips COG FIPS code msa Metro/micropolitan area name msa_fips Metro/micropolitan area FIPS code puma PUMA name puma_fips PUMA FIPS code, based county FIPS puma_fips_cog PUMA FIPS code, based COG FIPS 2022 ACS","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"for-tract-town-","dir":"Reference","previous_headings":"","what":"For tract2town:","title":"CT crosswalk — xwalk","text":"data frame 879 rows 3 variables: tract Tract FIPS code tract_cog Tract FIPS code, based COG FIPS 2022 ACS town Town name","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/xwalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CT crosswalk — xwalk","text":"2020 2022 (COGs & towns) TIGER shapefiles","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip to town lookup — zip2town","title":"Zip to town lookup — zip2town","text":"crosswalk Connecticut's ZCTA5s towns shares populations households overlapping areas. row corresponds combination zip town; therefore, zips one observation, towns.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip to town lookup — zip2town","text":"","code":"zip2town"},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zip to town lookup — zip2town","text":"data frame 410 rows 8 variables: town Town name zip 5-digit zip code (ZCTA5) inter_pop Population intersection zips towns inter_hh Number households intersection zips towns pct_of_town_pop Percentage town's population also zip pct_of_town_hh Percentage town's households also zip pct_of_zip_pop Percentage zip's population also town pct_of_zip_hh Percentage zip's households also town","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/reference/zip2town.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Zip to town lookup — zip2town","text":"Cleaned-version Census 2022 ZCTA county subdivision relationship file, updated Connecticut's 2022 revisions counties COGs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-180","dir":"Changelog","previous_headings":"","what":"cwi 1.8.0","title":"cwi 1.8.0","text":"Fixed neighborhood shapefiles. now come directly cities’ data portals scratchpad repo, ’re published release, giving us single source truth boundaries . also errors neighborhoods Hartford / West Hartford Stamford received tracts outside city boundaries. result, weights tables changed fair amount. ’d also used combinations Stamford neighborhoods now city, shifts neighborhoods lumped together ’re labeled.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-171","dir":"Changelog","previous_headings":"","what":"cwi 1.7.1","title":"cwi 1.7.1","text":"Updated improved methods making zip2town crosswalk, based 2020 / 2022 geographies. columns included data frame slightly changed. Fixed issues qwi_industry: API now uses COGs Connecticut instead counties.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-170","dir":"Changelog","previous_headings":"","what":"cwi 1.7.0","title":"cwi 1.7.0","text":"Moved add_logo stylehaven package.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-163","dir":"Changelog","previous_headings":"","what":"cwi 1.6.3","title":"cwi 1.6.3","text":"Bumping package versions just draw attention fact ’s now set PUMA proxy crosswalks; see proxy_pumas.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-162","dir":"Changelog","previous_headings":"","what":"cwi 1.6.2","title":"cwi 1.6.2","text":"Edit xwalk—still FIPS codes update COG-based versions. data frame now includes COG-based codes block groups, tracts, towns, PUMAs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-161","dir":"Changelog","previous_headings":"","what":"cwi 1.6.1","title":"cwi 1.6.1","text":"Bump ACS-related defaults 2022","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-160","dir":"Changelog","previous_headings":"","what":"cwi 1.6.0","title":"cwi 1.6.0","text":"MINOR BREAKING CHANGE: update corresponds 2022 ACS data release, first use COGs instead counties. COGs different FIPS codes, town tract FIPS codes (apparently block groups) changed match. bulk code digits stay , portion signifying county changed, e.g. 09009140101 now 09170140101. deal without breaking much code, changes package: Neighborhood lookup tables (bridgeport_tracts, etc) previous county-based FIPS codes column geoid, new COG-based FIPS codes column geoid_cog. xwalk now columns COG-based town tract FIPS codes, addition previous county-based ones. Calling multi_geo_acs counties = \"\" (default) get COGs, multi_geo_decennial get counties, switch retroactive. names COGs returned multi_geo_acs used names regions list ones Census Bureau uses. Unfortunately, aren’t ones state uses. , ’ve added function fix_cogs, replaces common names ones state lists somewhat officially, e.g. Capitol COG census data, Capitol Region COG state usually uses probably always. Finally, part doesn’t come often break: previously multi_geo_* functions took neighborhood names, weights, GEOIDs bare column names, defaults (name, weight, geoid, respectively). now given strings (.e. quotation marks), geoid longer default. deal fact calculations now need neighborhood lookup tables’ geoid columns, need geoid_cog. matters ’re including neighborhoods function calls.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-150","dir":"Changelog","previous_headings":"","what":"cwi 1.5.0","title":"cwi 1.5.0","text":"2020 decennial census added dozen new census designated places, village2town based . now overlap towns even less well used . table recalculated, towns villages joined based overlapping population 2020 decennial, now includes populations weights crosswalk. means things break ’re expecting one set CDPs get another, ’re expecting new columns table.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-140","dir":"Changelog","previous_headings":"","what":"cwi 1.4.0","title":"cwi 1.4.0","text":"MINOR BREAKING CHANGE: multi_geo_decennial now defaults 2020. 2020 decennial uses different summary file code previous years, default sumfile argument, used 2010, lead error. 2020 decennial variables now available decennial_vars20. 2010 ones still decennial_vars10. new data frame, cb_avail, years, programs (ACS vs decennial), dataset codes (SF1, ACS5, DHC, etc.) available Census Bureau’s API. function dh_scaffold poorly named great fit aims project. ’s moved {stylehaven}; find scaffold_project. Minor improvements warnings messages.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-130","dir":"Changelog","previous_headings":"","what":"cwi 1.3.0","title":"cwi 1.3.0","text":"Add COGs xwalk along function reconciling names","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-120","dir":"Changelog","previous_headings":"","what":"cwi 1.2.0","title":"cwi 1.2.0","text":"Update defaults 2021 applicable: multi_geo_acs, adj_inflation base year, label_acs. Replace acs_vars20 acs_vars21. multi_geo_decennial now takes \"pl\" possible value summary file, since full 2020 Decennial data still aren’t .","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-113","dir":"Changelog","previous_headings":"","what":"cwi 1.1.3","title":"cwi 1.1.3","text":"Add regional councils governments regions list. Connecticut adopted 2022 replace counties. Definitions CTOPM . Add vignette regions since ’s many now","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-112","dir":"Changelog","previous_headings":"","what":"cwi 1.1.2","title":"cwi 1.1.2","text":"Start handling updated MSA definitions—sure datasets actually use yet Add rescale option sub_nonanswers—default won’t change existing code","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-111","dir":"Changelog","previous_headings":"","what":"cwi 1.1.1","title":"cwi 1.1.1","text":"Bugfix: occupational codes larger groups smaller groups. One larger group (Healthcare Practitioners Technical Occupations) mislabeled marked Education, Legal, Community Service, Arts, Media Occupations.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-110","dir":"Changelog","previous_headings":"","what":"cwi 1.1.0","title":"cwi 1.1.0","text":"updates 2020 2020 ACS 5-year data finally , acs_vars19 replaced acs_vars20, multi_geo_acs now uses 2020 default. examples & vignette code updated match. Decennial census data aren’t yet won’t time, decennial-related things still default 2010.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-100","dir":"Changelog","previous_headings":"","what":"cwi 1.0.0","title":"cwi 1.0.0","text":"Major exciting overhaul! first time felt like enough package flexible well thought consider real release. lot changes hood–split lot functions slimmed-main “caller” functions multiple task-focused “helper” functions, making easier maintain package, add modify features, use code multiple tasks.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"user-facing-updates-1-0-0","dir":"Changelog","previous_headings":"","what":"User-facing updates","title":"cwi 1.0.0","text":"Moved base messages cli cleaner clearer messaging (printouts fetch functions getting, limitations function calls, etc) Better handling Census API calls better deal often servers busted Metadata: several behind--scenes datasets set limits functions’ API calls now expanded just limited Connecticut–includes qwi_industry laus_trend. Added table occupation codes main occupation groups Better documentation many functions","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"cwi 1.0.0","text":"’ve never liked levels multi_geo_* functions–don’t really remember made plural, ’re now singular. column e.g. “1_state”, “2_counties”, “3_towns” now “1_state”, “2_county”, “3_town”. might break filtering ’ve done level. Renamed one function: acs_quick_map –> quick_map","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"to-do-1-0-0","dir":"Changelog","previous_headings":"","what":"To do","title":"cwi 1.0.0","text":"Update 2020 ACS Decennial defaults","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-045","dir":"Changelog","previous_headings":"","what":"cwi 0.4.5","title":"cwi 0.4.5","text":"Add sleep argument multi_geo_acs dealing API crashes.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-044","dir":"Changelog","previous_headings":"","what":"cwi 0.4.4","title":"cwi 0.4.4","text":"Add handling reading crosstab weights placed headers alongside data rather separate table (e.g. 2021).","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-043","dir":"Changelog","previous_headings":"","what":"cwi 0.4.3","title":"cwi 0.4.3","text":"Import camiller::calc_shares Add sample data ACS: gnh_tenure","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-042","dir":"Changelog","previous_headings":"","what":"cwi 0.4.2","title":"cwi 0.4.2","text":"Since 2020 ACS delayed, decided still copies 2019 geography-related files. temporary, now 2 versions tract shapefile (tract_sf tract_sf19), 2 versions neighborhood-tract weight table (e.g. new_haven_tracts new_haven_tracts19, ). data , ’ll remove 2019 versions bump package version.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-041","dir":"Changelog","previous_headings":"","what":"cwi 0.4.1","title":"cwi 0.4.1","text":"Update tract_sf town_sf 2020 boundaries. Don’t expect anything changed towns, many tracts added Census Bureau released redistricting data. Handle typos crosstabs.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-040","dir":"Changelog","previous_headings":"","what":"cwi 0.4.0","title":"cwi 0.4.0","text":"Rewrote neighborhood weights 2020 redistricting block boundaries. Dropped block group table done New Haven, changed name nhv_tracts new_haven_tracts match cities. QWI API working , payroll data missing database.","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-031","dir":"Changelog","previous_headings":"","what":"cwi 0.3.1","title":"cwi 0.3.1","text":"Minor behind--scenes updates","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-030","dir":"Changelog","previous_headings":"","what":"cwi 0.3.0","title":"cwi 0.3.0","text":"QWI example basic workflow vignette currently turned , Census QWI API least days now. turn back API (hopefully) back online. New function: Add function separate_acs lazy way split ACS labels.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-020","dir":"Changelog","previous_headings":"","what":"cwi 0.2.0","title":"cwi 0.2.0","text":"Added finished versions read_xtab, read_weights, xtab2df, collapse_n_wt working DataHaven Community Wellbeing Survey crosstabs—see vignettes Added add_logo built-DataHaven logo Bug fixes sub_nonanswers, xwalk","code":""},{"path":[]},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-012","dir":"Changelog","previous_headings":"","what":"cwi 0.1.2","title":"cwi 0.1.2","text":"multi_geo_acs & multi_geo_decennial call janitor::clean_names returning. keeps columns aligned properly neighborhoods included.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-011","dir":"Changelog","previous_headings":"","what":"cwi 0.1.1","title":"cwi 0.1.1","text":"Expanded xwalk data include geographic levels. Minor vignette cleanup.","code":""},{"path":"https://CT-Data-Haven.github.io/cwi/news/index.html","id":"cwi-010","dir":"Changelog","previous_headings":"","what":"cwi 0.1.0","title":"cwi 0.1.0","text":"Added NEWS.md file track changes package. Functions make use API keys explicit key arguments Census BLS API keys don’t stored specific environment variables, though ’ll still default environment variables. Installation easier less overhead, now fewer dependencies. Fixed bugs BLS API adj_inflation. multi_geo_acs multi_geo_decennial can aggregate neighborhood data. ’s example workflow vignette. now date newer dplyr 1.0.0 & tidyr 1.0.0 functions. New functions: jenks, dh_scaffold","code":""}]
